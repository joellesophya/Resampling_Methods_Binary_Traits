findInterval(x = 0, c(-1,3))
findInterval(x = 0, c(-,3))
findInterval(x = 0, c(2,3))
findInterval(x = 2, c(2,3))
findInterval(x = 3, c(2,3))
findInterval(x = 4, c(2,3))
findInterval(x = 0, c(2,3))
findInterval(x = 3, c(2,3), rightmost.closed = T)
findInterval(x = 4, c(2,3), rightmost.closed = T)
getwd()
setwd(gsub("\\\\", "/", readClipboard()))
getwd()
load(".RData")
ls()
str(est_vec)
lapply(est_vec, function(ests){
e<- colMeans(ests)[-2]
ses <- apply(ests, 2, sd)/sqrt(nrow(ests)
rbind(e,ses)
}
lapply(est_vec, function(ests){
e<- colMeans(ests)[-2]
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
rbind(e,ses)
})
lapply(est_vec, function(ests){
e<- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
rbind(e,ses)
})
target
lapply(est_vec, function(ests){
e<- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
round(rbind(e,ses),3)
})
findInterval(1:5, cbind(1,4))
findInterval(1:5, cbind(1,4), rightmost.closed = T)
lapply(est_vec, function(ests){
e<- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- findInterval(target, cbind(e - ses, e+ses), rightmost.closed = T) == 1
round(rbind(e,ses, ci_in),3)
})
lapply(est_vec, function(ests){
e<- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- sapply(1:length(e), function(i) findInterval(target[i], cbind(e - ses, e+ses)[i,], rightmost.closed = T) == 1)
round(rbind(e,ses, ci_in),3)
})
lapply(est_vec, function(ests){
z <- qnorm(1-.05/2)
e<- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- sapply(1:length(e), function(i) findInterval(target[i], cbind(e - z* ses, e+ z* ses)[i,], rightmost.closed = T) == 1)
round(rbind(e,ses, ci_in),3)
})
target
0.513 - 2 * 0.011
1.218 - 2 *0.017
lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(e, function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), ses)
round(rbind(e,ses, ci_in),3)
})
target
lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
mean_e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(mean_e, function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), ses)
round(rbind(mean_e,ses, ci_in),3)
})
mapply()lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
mean_e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), mean_e, ses)
round(rbind(mean_e,ses, ci_in),3)
})
lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
mean_e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), mean_e, ses)
round(rbind(mean_e,ses, ci_in),3)
})
0.502-2*0.011
0.502-2*0.01100
colMeans(est_vec[[1]])[2]
colMeans(est_vec[[1]])[2] - 2 * 0.011
colMeans(est_vec[[1]])[2] - 2 * var(est_vec)
var(est_vec)
varcov(est_vec)
cov(est_vec)
t.test(est_vec[[1]],mu = target[1])
t.test(est_vec[[1]][,2],mu = target[1])
t.test(est_vec[[1]][,3],mu = target[1])
mapply()lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
mean_e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), mean_e, ses)
round(rbind(mean_e,ses, ci_in),3)
})
lapply(1:length(est_vec), function(i){
ests <- est_vec[[i]]
tar <- target[i]
z <- qnorm(1-.05/2)
mean_e <- colMeans(ests)
ses <- apply(ests, 2, sd)/sqrt(nrow(ests))
ci_in <- mapply(function(a_est, se_est) findInterval(tar, a_est + c(-1,1) *  z * se_est, rightmost.closed = T), mean_e, ses)
round(rbind(mean_e,ses, ci_in),3)
})
data.table::fwrite
t0 <- proc.time()
t1 <- proc.time()
t1-t0
x
library(data.table)
x<-as.data.table(x)
str(x)
class(x)
class(t(x))
library(Matrix)
class(x)
as(x,"sparseMatrix")
as(t(x),"sparseMatrix")
setkey(x, gmmat_load)
setkey(x, GMMAT)
x
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/FHS data T2D/MCMC_null_res.RData")
ls()
pvals
key(pvals)
x
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/FHS data T2D/FHS_gwas_results.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/FHS data T2D/")
ls()
str(allfile)
str(ls())
lapply(ls(), str)
ls()
rm(allfile)
str(body)
str(ci_in)
rm(body,ci_in,ck,dummy)
str(effSizes)
rm(list=ls())
load("FHS_gwas_results.RData")
ls()
rm(ck, dummy)
effS
first_time
rm(first_time)
gene_info
str(ind_in_geno_info)
rm(ind_in_geno_info)
str(ind_retained)
rm(ind_retained)
rm(minp)
n_person_fam
str(ord)
rm(ord)
ped_rem
rm(ped_rem)
str(shareid_geno)
str(shareid_retained)
rm(shareid_geno,shareid_retained)
x
rm(x)
unaff
rm(unaff)
save.image("FHS_gwas_results.RData")
ls()
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/naive perm/2.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/naive perm/")
res[[1]][[1]]
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
p <- if(length(pvals)>1) pvals[[i_p]] else pvals[[1]]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\nn =", n," Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
return()
}
## QQ plot of the p-values
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
##### Analysis
pvals <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$Ty))))
herit <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$her))))
ind <- (1:n_M)[sapply(pvals, function(a) !is.null(a))]
sink(paste0(method_name,Yperm_type,"2.txt"))
get_type1err(pvals[ind])
sink()
png(paste0(method_name,Yperm_type,"2_%01d.png"))
par(mfrow=c(2,2))
x <- lapply(ind, function(i, p, tl){
plot_p(p[[i]], tl[i])
hist(p[[i]], main="Histogram of permutation-based p-values",freq = F,breaks=100)
abline(h=1,col="red")
}, pvals, paste(method_name,Yperm_type, "with Tu = ", M$Tu[ind]))
boxplot(herit[ind])
dev.off()
M
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Higher MAF RVs/.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Higher MAF RVs/")
library(data.table)
x<-fread("haplo_commonRVs.txt")
dim(x)
summary(colMeans(x)/2)
x[,1:10,with=F]
summary(colMeans(x-1)/2)
summary(colMeans(-(x-2))/2)
mean(colMeans(-(x-2))/2 > .01)
sum(colMeans(-(x-2))/2 > .01)
which(colMeans(-(x-2))/2 > .01)
z<-which(colMeans(-(x-2))/2 > .01)
x2 <- x[,z,with=FALSE]
dim(x2)
write.table(x2, "haplo_1_5_pct.txt", col.names = F, row.names = F)
x<-fread("haplo_1_5_pct.txt")
dim(x)
summary(colMeans(x)/2)
do{x = 2} while x>1
do{}
do(x=2)
repeat(x=1; if(x<2) break)
repeat(x=1
if(x<2) break)
repeat{x=1; if(x<2) break}
x
?repeat
?
''
>x<-fread("haplo_commonRVs.txt")
x<-fread("haplo_commonRVs.txt")
summary(colMeans(-(x-2)))
z<-which(colMeans(-(x-2))/2 > .01)
sum(z)
length(z)
dim(x)
colMeans(-(x-2))
sort(colMeans(-(x-2)))
sort(colMeans(-(x-2))/2)
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/bigger nfam/.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/bigger nfam/")
res[[1]][[1]]
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
p <- if(length(pvals)>1) pvals[[i_p]] else pvals[[1]]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\nn =", n," Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
return()
}
## QQ plot of the p-values
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
##### Analysis
pvals <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$Ty))))
herit <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$her))))
res[[2]]
ind <- (1:n_M)[sapply(pvals, function(a) !is.null(a))]
ind
sink(paste0(method_name,Yperm_type,"1_5pct.txt"))
get_type1err(pvals[ind])
sink()
png(paste0(method_name,Yperm_type,"1_5pct_%01d.png"))
par(mfrow=c(2,2))
x <- lapply(ind, function(i, p, tl){
plot_p(p[[i]], tl[i])
hist(p[[i]], main="Histogram of permutation-based p-values",freq = F,breaks=100)
abline(h=1,col="red")
}, pvals, paste(method_name,Yperm_type, "with Tu = ", M$Tu[ind]))
boxplot(herit[ind])
dev.off()
getwd()
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/bigger nfam/.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Quant. Yperm/bigger nfam/")
ind
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
p <- if(length(pvals)>1) pvals[[i_p]] else pvals[[1]]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\nn =", n," Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
return()
}
## QQ plot of the p-values
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
##### Analysis
pvals <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$Ty))))
herit <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$her))))
str(pvals)
sink(paste0(method_name,Yperm_type,".txt"))
get_type1err(pvals)
sink()
png(paste0(method_name,Yperm_type,"%01d.png"))
par(mfrow=c(2,2))
x <- lapply(1:length(pvals), function(i, p, tl){
plot_p(p[[i]], tl[i])
hist(p[[i]], main="Histogram of permutation-based p-values",freq = F,breaks=100)
abline(h=1,col="red")
}, pvals, paste(method_name,Yperm_type, "with Tu = ", M$Tu))
boxplot(herit)
dev.off()
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Higher MAF RVs/1.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/wVT/Higher MAF RVs/")
res[[1]][[1]]
pvals <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$Ty))))
herit <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$her))))
str(pvals)
M
pvals1<-pvals
herit1<-herit
load("2.RData")
pvals <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$Ty))))
herit <-lapply(res, function(x) unlist(lapply(x, function(a) as.double(a$her))))
M
pvals2<-pvals;herit2<-herit
pvals <- lapply(1:6, function(i) c(pvals1[[i]], pvals2[[i]]))
str(pvals)
herit <- lapply(1:6, function(i) c(herit1[[i]], herit2[[i]]))
str(herit)
getwd()
ind <- (1:n_M)[sapply(pvals, function(a) !is.null(a))]
sink(paste0(method_name,Yperm_type,".txt"))
get_type1err(pvals[ind])
sink()
png(paste0(method_name,Yperm_type,"_%01d.png"))
par(mfrow=c(2,2))
x <- lapply(ind, function(i, p, tl){
plot_p(p[[i]], tl[i])
hist(p[[i]], main="Histogram of permutation-based p-values",freq = F,breaks=100)
abline(h=1,col="red")
}, pvals, paste(method_name,Yperm_type, "with Tu = ", M$Tu[ind]))
boxplot(herit[ind])
dev.off()
ggggggggggggggggg
getws()
getwd()
setwd("../..")
.3*22
4/22
22/5
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/Quant Yperm/wVT/100 RVs per set/.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/EE-based resampling method/Quant Yperm/wVT/100 RVs per set/")
str(pvals)
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
p <- if(length(pvals)>1) pvals[[i_p]] else pvals[[1]]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\nn =", n," Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
return()
}
## QQ plot of the p-values
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
M
ind <- (1:n_M)[sapply(pvals, function(a) !is.null(a))]
sink(paste0(method_name,Yperm_type,".txt"))
get_type1err(pvals[ind])
sink()
png(paste0(method_name,Yperm_type,"_%01d.png"))
par(mfrow=c(2,2))
x <- lapply(ind, function(i, p, tl){
plot_p(p[[i]], tl[i])
hist(p[[i]], main="Histogram of permutation-based p-values",freq = F,breaks=100)
abline(h=1,col="red")
}, pvals, paste(method_name,Yperm_type, "with Tu =", M$Tu[ind]))
boxplot(herit[ind])
dev.off()
n_M
setwd(gsub("\\\\", "/", readClipboard()))
hap <- fread("haplo.txt")
library(data.table)
hap <- fread("haplo.txt")
dim(hap)
nameS(hap)
names(hap)
gendata<-hap;rm(hap)
gendata[1,1:5,with=F]
gendata <- gendata[, V1 := sapply(strsplit(V1, "\t"), function(a) as.numeric(tail(a,1)))]
rm(gendata)
filename <- "haplo.txt"
hap <- fread(filename)
mafs <- colMeans(hap)/2
summary(mafs <- colMeans(hap)/2)
summary(mafs <- colMeans(3-hap)/2)
hap[,1]
x=hap[,1,with=F]
mean(x)
x
summary(x)
summary(x==1)
mean(x==1)
summary(mafs <- colMeans(hap==1))
fread("haplo_commonRVs.txt")
hap<-fread("haplo_commonRVs.txt")
summary(mafs <- colMeans(hap==1))
library(data.table)
#Read in files
filename <- 'haplofile8022206297'
filename <- 'outf7174150170'
gendata <- fread(filename, header=F, sep = " ")
gendata <- gendata[, V1 := sapply(strsplit(V1, "\t"), function(a) as.numeric(tail(a,1)))]
posdata <- fread(paste0(filename,'_pos'), header=F, skip = 1)
setnames(posdata, 1:ncol(posdata), c('SNP','CHROM','CHROM_POS','ALLELE1','FREQ1','ALLELE2','FREQ2'))
hap<-fread("haplo_1_5_pct.txt")
dim(hap)
summary(mafs <- colMeans(hap==1))
getwd()
setwd(gsub("\\\\", "/", readClipboard()))
hap <- fread("haplo_commonRVs.txt")
summary(mafs <- colMeans(hap==1))
summary(mafs <- colMeans(hap==1))
