setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project//Binary version of permutation method//Results")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project//Binary version of permutation method")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project/Binary trait/Results/")
p_vals=read.table('From Oct 13 2014//simulation2//sim_pvals2.txt',header=F)$V1
n=length(p_vals)
uni= rank(p_vals,ties.method='max'); names(uni)=c()
mean(p_vals<.05)
# Do a t-test to check if type I error rate is different from nominal level (.05)
mean(p_vals<.05)+c(-1,1)*qt(1-.05/2,999)*sd(p_vals<=.05)/sqrt(1000) #95% CI
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project//Binary version of permutation method//Results")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project/Binary trait/Results/")
## For 7500 permutations
p=read.table('From Oct 30 2014/sim_pvals75.txt',header=F)
p=unlist(c(p));names(p)=c();n=length(p);n
alpha=.05
summary(p)
prop.test(x=sum(p<alpha),n,p=alpha)
hist(p)
hist(p,freq=F,breaks=100)
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project/Binary trait/Results/")
p=read.table('From Oct 29 2014/sim_pvals_onsam.txt',header=F)
p=unlist(c(p));names(p)=c()
hist(p,freq=F,breaks=100)
q=read.table('From Oct 29 2014/sim_pvals_onpel.txt',header=F)
q=unlist(c(q));names(q)=c()
hist(q,freq=F,breaks=100)
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project/Binary trait/Using LMM method/")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project/Binary trait/Using LMM method/")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG//C Code//Project//Permutation based methods//Binary trait/Using LMM method/Basic simulation file - with RV1/")
YG=read.table('test.txt',header=F)
dim(YG)
install.packages('Assoteste')
library("AssotesteR", lib.loc="~/R/win-library/3.1")
VT(YG[,1],YG[,2:51])
YG=read.table('test.txt',header=F)
VT(YG[,1],YG[,2:51])
cls
YG=read.table('test.txt',header=F)
VT(YG[,1],YG[,2:51])
VT
VT1=
function (y, X, maf = 0.05, perm = 100)
{
Xy_perm = my_check(y, X, perm)
y = Xy_perm$y
X = Xy_perm$X
perm = Xy_perm$perm
if (mode(maf) != "numeric" || length(maf) != 1 || maf <=
0 || maf >= 1)
stop("argument 'maf' must be a value between 0 and 1")
mafs = (1 + colSums(X, na.rm = TRUE))/(2 + 2 * nrow(X))
h.maf = sort(unique(mafs))
vt.stat = my_vt_method(y, X, mafs, h.maf)
perm.pval = NA
if (perm > 0) {
x.perm = rep(0, perm)
for (i in 1:perm) {
perm.sample = sample(1:length(y))
x.perm[i] = my_vt_method(y[perm.sample], X, mafs,
h.maf)
}
perm.pval = sum(x.perm >= vt.stat)/perm
}
name = "VT: Variable Threshold"
arg.spec = c(sum(y), length(y) - sum(y), ncol(X), maf, perm)
names(arg.spec) = c("cases", "controls", "variants", "maf",
"n.perms")
res = list(vt.stat = vt.stat, perm.pval = perm.pval, args = arg.spec,
name = name)
class(res) = "assoctest"
return(res)
}
VT1(YG[,1],YG[,2:51])
VT1=
function (y, X, maf = 0.05, perm = 100)
{
Xy_perm = my_check(y, X, perm)
y = Xy_perm$y
X = Xy_perm$X
perm = Xy_perm$perm
if (mode(maf) != "numeric" || length(maf) != 1 || maf <=
0 || maf >= 1)
stop("argument 'maf' must be a value between 0 and 1")
mafs = (1 + colSums(X, na.rm = TRUE))/(2 + 2 * nrow(X))
h.maf = sort(unique(mafs))
vt.stat = my_vt_method(y, X, mafs, h.maf)
perm.pval = NA
if (perm > 0) {
x.perm = rep(0, perm)
for (i in 1:perm) {
perm.sample = sample(1:length(y))
x.perm[i] = my_vt_method(y[perm.sample], X, mafs,
h.maf)
}
perm.pval = sum(x.perm >= vt.stat)/perm
}
name = "VT: Variable Threshold"
arg.spec = c(sum(y), length(y) - sum(y), ncol(X), maf, perm)
names(arg.spec) = c("cases", "controls", "variants", "maf",
"n.perms")
res = list(vt.stat = vt.stat, perm.pval = perm.pval, args = arg.spec,
name = name)
class(res) = "assoctest"
return(res)
}<environment: namespace:AssotesteR>
VT1=
function (y, X, maf = 0.05, perm = 100)
{
Xy_perm = my_check(y, X, perm)
y = Xy_perm$y
X = Xy_perm$X
perm = Xy_perm$perm
if (mode(maf) != "numeric" || length(maf) != 1 || maf <=
0 || maf >= 1)
stop("argument 'maf' must be a value between 0 and 1")
mafs = (1 + colSums(X, na.rm = TRUE))/(2 + 2 * nrow(X))
h.maf = sort(unique(mafs))
vt.stat = my_vt_method(y, X, mafs, h.maf)
perm.pval = NA
if (perm > 0) {
x.perm = rep(0, perm)
for (i in 1:perm) {
perm.sample = sample(1:length(y))
x.perm[i] = my_vt_method(y[perm.sample], X, mafs,
h.maf)
}
perm.pval = sum(x.perm >= vt.stat)/perm
}
name = "VT: Variable Threshold"
arg.spec = c(sum(y), length(y) - sum(y), ncol(X), maf, perm)
names(arg.spec) = c("cases", "controls", "variants", "maf",
"n.perms")
res = list(vt.stat = vt.stat, perm.pval = perm.pval, args = arg.spec,
name = name)
class(res) = "assoctest"
return(res)
}
<environment: namespace:AssotesteR>
my_check()
VT1(YG[,1],YG[,2:51])
my_check
?source
source(VT)
methods(VT)
getMethod(VT)
getAnywhere(VT)
getAnywhere(my_check)
my_check=function (y, X, perm)
{
if (!is.vector(y) || mode(y) != "numeric")
stop("Sorry, argument 'y' must be a numeric vector")
if (any(is.na(y)))
stop("No missing data allowed in argument 'y' ")
if (!all(y %in% c(0, 1)))
stop("Argument 'y' must contain only 0 and 1")
if (!is.matrix(X) & !is.data.frame(X))
stop("Argument 'X' must be a matrix or data.frame")
if (nrow(X) != length(y))
stop("'X' and 'y' have different lengths")
if (!is.matrix(X))
X = as.matrix(X)
if (mode(perm) != "numeric" || length(perm) != 1 || perm <
0 || (perm%%1) != 0) {
warning("argument 'perm' incorrectly defined. Value perm=100 is used")
perm = 100
}
list(y = y, X = X, perm = perm)
}
VT1(YG[,1],YG[,2:51])
my_check=function (y, X, perm)
{
if (!is.vector(y) || mode(y) != "numeric")
stop("Sorry, argument 'y' must be a numeric vector")
if (any(is.na(y)))
stop("No missing data allowed in argument 'y' ")
if (!is.matrix(X) & !is.data.frame(X))
stop("Argument 'X' must be a matrix or data.frame")
if (nrow(X) != length(y))
stop("'X' and 'y' have different lengths")
if (!is.matrix(X))
X = as.matrix(X)
if (mode(perm) != "numeric" || length(perm) != 1 || perm <
0 || (perm%%1) != 0) {
warning("argument 'perm' incorrectly defined. Value perm=100 is used")
perm = 100
}
list(y = y, X = X, perm = perm)
}
VT1(YG[,1],YG[,2:51])
getAnywhere(my_vt_method)
my_vt_method=function (casecon, gen, mafs, h.maf)
{
z.scores = rep(0, length(h.maf) - 1)
y.new = casecon - mean(casecon)
for (i in 1:(length(h.maf) - 1)) {
z.num = sum(gen[, mafs < h.maf[i + 1]] * y.new, na.rm = TRUE)
z.denom = sqrt(sum((gen[, mafs < h.maf[i + 1]])^2, na.rm = TRUE))
z.scores[i] = z.num/z.denom
}
stat = max(z.scores)
stat
}
VT1(YG[,1],YG[,2:51])
