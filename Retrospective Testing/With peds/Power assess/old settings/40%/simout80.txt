
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # 200K MCMC iterations W ASCERT 5+
> library(mvtnorm)
> library(parallel)
> library(reshape)
> 
> library(MCMCglmm)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:reshape’:

    expand

Loading required package: coda
Loading required package: ape
> lib_folder <- strsplit(getwd(),"/")[[1]][2]
> lib_folder <- paste0("/",lib_folder, "/mbatchou/GMMAT") 
> library(GMMAT, lib.loc = lib_folder)
> 
> # Parameters for simulation
> N_fam <- 45
> n_person <- 22
> n_total <- N_fam * n_person
> 
> # Make pedigree
> ped1 <- data.frame(fam = NA, ind = 1:n_total, fa = NA, mo = NA)
> fa_ind <- c(NA,NA,NA,1,1,NA,1,NA,1,NA,4,4,4,6,6,6,8,8,10,10,10,10)
> mo_ind <- c(NA,NA,NA,2,2,NA,2,NA,2,NA,3,3,3,5,5,5,7,7,9,9,9,9)
> ped1[,c('mo','fa')] <- cbind(rep(mo_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person),
+                              rep(fa_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person))
> Prec <- inverseA(ped1[,c('ind','mo','fa')])$Ainv
> ped1[is.na(ped1)] <- 0
> ped1$fam <- rep(1:N_fam, each = n_person)
> write.table(ped1,'pedigree',row.names=FALSE, col.names=FALSE,sep='\t')
> 
> # Generate data
> phi <- as.matrix(read.table("add_phi_mat_n22")); colnames(phi) <- 1:n_person
> Phimat <- diag(N_fam) %x% phi
> kin <- melt(diag(N_fam)%x%phi)[,c(2,1,3)]; kin = kin[kin[,1]<=kin[,2],]
> # Get fam for row and col indID
> kin$famrow <- ((kin[,1]-1)%/%n_person) + 1; kin$famcol <- ((kin[,2]-1)%/%n_person) + 1
> kin <- kin[kin$famrow==kin$famcol,]
> phi_inv <- solve(phi) #22x22 matrix
> sex <- rep(c(1,2,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,1),N_fam) #constant
> 
> peddrop <- function (parentmat, MAF) { # parentmat is matrix of parental info
+   nfound <- sum((parentmat[, 1] == 0) & (parentmat[, 2] == 0))
+   npeople <- dim(parentmat)[1]
+   haplos <- matrix(0, npeople, 2)
+   haplos[(parentmat[, 1] == 0) & (parentmat[, 2] == 0),] <- matrix(1:(2 * nfound), nfound, 2, byrow=T)
+   
+   for (i in 1:npeople) {
+     #/* When both parents are in the pedigree drop alleles down the pedigree */
+     if ((parentmat[i, 1] != 0) & (parentmat[i, 2] != 0)) {
+       #/* Randomly choose chrom. 0 or 1 to transmit to kid at each locus
+       trchrom = sample(1:2, 2, replace = T)
+       #// For GT haplotype
+       haplos[i, 1] = haplos[parentmat[i, 1], trchrom[1]];
+       haplos[i, 2] = haplos[parentmat[i, 2], trchrom[2]];
+     } 
+   }
+   
+   state <- as.numeric(runif(2 * nfound) < MAF) #1 if minor, 0 if major allele
+   genos <- matrix(0, npeople, 2)
+   for (i in 1:npeople) genos[i, ] = state[haplos[i,]]
+   
+   return(genos)
+ }
> 
> runme = function (dummy, Tu, Tot)
+ {
+ 	kt<<- kt + 1; write(kt, "iteration_track.txt")
+ 	add_var <- Tu * Tot
+ 	S_XB <- sqrt(Tot * (1 - Tu) / (363.67+.25+1)) # Ratio of target variance to var(X)
+ 	beta <- c(.05, 1, .5) * S_XB
+ 	LG <- log(1.1) # increase of 10% in the odds of being a case
+ 	int <- qlogis(0.1) - beta[1] * 31.86 -  beta[2] * 1.5 - LG * .1425  # Prevalence - b * E(X) - lambda * .1425
+ 	pvalsR = -1
+ 	
+ 	while(any(pvalsR < 0)){
+ 		Y <- NULL; age <- NULL; Z <- NULL; G1 <- NULL
+ 		# Generate family by family
+ 		for (i_fam in 1:N_fam){
+ 			ascert = 0
+ 			while(ascert == 0){
+ 				age_f <- c(73,75,46,43,40,46,40,43,47,51,18,21,15,15,12,9,13,17,24,21,18,14) + runif(n_person, -1.5, 1.5)
+ 				Z_f <- rnorm(n_person)
+ 				U <- c(rmvnorm(1, sigma = add_var * phi)) 
+ 				G1_f <- rowSums(peddrop( ped1[1:n_person, c("fa","mo")], 0.1 )) # Assumes same pedigree structure across families
+ 				G2_f <- rowSums(peddrop( ped1[1:n_person, c("fa","mo")], 0.5 ))
+ 				
+ 				Y_f <- rbinom(n_person, size = 1, prob = plogis(int + U + LG * ((G1_f > 0) & (G2_f > 0)) +	age_f * beta[1] + sex[ped1$fam == i_fam] * beta[2] + Z_f * beta[3]))
+ 				
+ 				if(sum(Y_f) > 4) ascert <- 1 #At least 5 affected
+ 			}
+ 			Y <- append(Y, Y_f)
+ 			age <- append(age, age_f)
+ 			Z <- append(Z, Z_f)
+ 			G1 <- append(G1, G1_f)
+ 		}
+ 		fam_data = data.frame(Y=Y, age = age, sex = sex, Z = Z, idU = 1:n_total)
+ 
+ ### MCMC glmm
+ 		prior1 <- list(R = list(V = 1, fix=1),
+ 		G = list(G1 = list(V = 1, nu = 1, alpha.mu=0, alpha.V=10^2)))
+ 		mMCMC <- MCMCglmm(Y ~ 1 + age + sex + Z, random =~idU, family = "categorical",
+ 		ginverse = list(idU = Prec), prior=prior1,
+ 		data = fam_data, verbose = F, nitt=250e3, thin=500, burnin=5e3)
+ 		con_pi <- as.vector(predict(mMCMC, posterior = "mode", type = "response")) # conditional on posterior mode of parameters (beta, u) -- E(pi|u)
+ # Numerator
+ 		T_num1 <- crossprod(G1, Y - con_pi)^2
+ # Retrospective denominator
+ 		get_denum_retro <- function(G, Matdenum){ 
+ 			maf <- mean(G) / 2 #(sum(G) + 1) / ((n_total + 1) * 2)  --> Not necessary since G is common variant
+ 			2 * maf * (1 - maf) * Matdenum
+ 		}
+ 		YPhiY <- crossprod(Y - con_pi, Phimat) %*% (Y - con_pi) #marginal mean
+ 		T_denumR1 <- get_denum_retro(G1, YPhiY)
+ 		pvalsR <- pchisq(T_num1 / T_denumR1, df = 1, lower.tail = F)
+ 
+ 		numend <- sample(1e6,1)
+ 		filend <- paste0(numend, '.txt')
+ # GMMAT
+ 		mGMMAT <- glmmkin(Y ~ age + sex + Z,  data = fam_data, kins = Phimat, family = binomial(link="logit"))
+ 		write(c("SNP1",G1), paste0('geno', filend), ncolumns = n_total + 1, sep='\t')
+ 		capture.output(glmm.score.text(mGMMAT$res, mGMMAT$P, infile = paste0('geno', filend), outfile = paste0('gmmat_out', filend)), file = "/dev/null")
+ 		pvalsR <- append(pvalsR, as.numeric(read.table(paste0('gmmat_out', filend), header=T)[6]))
+ 
+ # CARAT
+ 		write.table(cbind(1,ped1[,-1],fam_data[,c(3,1,2:4)]), paste0('phenofile', filend), sep = '\t', quote=F, col.names=F, row.names=F)
+ 		write(c('Chr','SNP','cm','bp',1:n_total), paste0('genofile', filend), ncolumns = n_total + 4, sep='\t')
+ 		write(c(1,'SNP1',1,50,unlist(list(c(1,1),c(1,2),c(2,2))[G1+1])), paste0('genofile', filend), ncolumns = n_total*2 + 4, sep='\t', append = T)
+ 		write.table(cbind(1,kin[kin$v>0,1:3]),paste0('grmfile', filend), row.names=F, col.names=F,sep=' ')
+ 		com_carat <- paste('./CARAT -p',paste0('phenofile', filend),'-g',paste0('genofile', filend),'-R ',paste0('grmfile', filend),'-o',numend)
+ 		ret <- system(com_carat, ignore.stdout = T, ignore.stderr = T)
+ 		if (ret != 0){
+ 			pvalsR <- append(pvalsR, -1)
+ 		} else pvalsR <- append(pvalsR, as.numeric(read.table(paste0(numend,'_out.txt'), header=T)[4]))
+ 
+ # CERAMIC
+ 		write.table(cbind(ped1[,1:2],fam_data$Y+1,fam_data[,2:4]), paste0('phenofile', filend), sep = '\t', quote=F, col.names=F, row.names=F)
+ 		kin2 = kin; kin2$value[kin2$v == 1] = 0; kin2$value = kin2$v/2
+ 		write.table(kin2[,c(4,1:3)],paste0('grmfile', filend), row.names=F, col.names=F,sep=' ')
+ 		write(G1, paste0('genofile', filend), ncolumns = n_total, sep='\t')
+ 		com_ceramic <- paste('./BATMAN -p',paste0('phenofile', filend),'-g',paste0('genofile', filend),'-k',paste0('grmfile', filend),'-c')
+ 		ret <- system(com_ceramic, ignore.stdout = T, ignore.stderr = T)
+ 		if (ret != 0){
+ 			pvalsR <- append(pvalsR, -1)
+ 		} else pvalsR <- append(pvalsR, as.numeric(read.table("BATMANtest.pvalues", header=T)[3]))
+ 
+ 	}
+   # Erase files
+   allfile <- list.files()
+   file.remove(allfile[grep(numend,allfile)])
+   return(pvalsR)
+ }
> 
> ########################### 
> ################## Analysis
> M = rbind(c(0.8,4.3))
> n_M = dim(M)[1]
> # Will be a list (over Tu/Te) of a list (over rep) of matrices (GMMAT and MCMC)
> res = rep(list(list()), n_M) 
> n_rep = 1000; kt <- 0 # To keep track of iterations
> 
> for(i in 1:n_M) {
+   res[[i]] = mclapply(1:n_rep, runme, mc.cores = 12, Tu= M[i,1], Tot = M[i,2])
+   save.image() #Save the res object
+ }
Warning message:
In mclapply(1:n_rep, runme, mc.cores = 12, Tu = M[i, 1], Tot = M[i,  :
  scheduled core 1 encountered error in user code, all values of the job will be affected
> 
> allfile <- list.files()
> file.remove(allfile[grep("BATMAN.",allfile)])
[1] TRUE TRUE TRUE TRUE
>   
> body <- tail(strsplit(getwd(),"/")[[1]],1); body <- paste("Folder: ", body) 
> system(paste("echo \"",body,"\" | mailx -s \"Sim done!\" joelle.mbatchou@gmail.com"), ignore.stdout = T, ignore.stderr = T)
> 
> # p_valsMCMC <- vector("list", n_M) # List of size n_M
> # est_varMCMC <- vector("list", n_M)
> # m <- length(res[[1]][[1]]) # Number of pvals + est add var
> 
> # for(i in 1:n_M) {
> # for(j in 1:n_rep){
> # p_valsMCMC[[i]] <- append(p_valsMCMC[[i]], res[[i]][[j]][-m])
> # est_varMCMC[[i]] <- append(est_varMCMC[[i]], res[[i]][[j]][m])
> # }
> # }
> 
> # #### P-values
>   # draw_pval <- function(p_vals, mar){
>     # n = length(p_vals)
>     # uni2= rank(p_vals, ties.method='max'); names(uni2)=c()
>     # plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
>     # a=seq(1e-6,1-1e-6,by=.0001) # gray area
>     # low=-log10(pmin(a+qnorm(1-.05/2)*sqrt(a*(1-a)/n),1))
>     # high=-log10(pmax(a-qnorm(1-.05/2)*sqrt(a*(1-a)/n),1e-6))
>     # polygon(c(-log10(a), rev(-log10(a))), c(high, rev(low)), col ='gray', border = NA)
>     # points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3) 
>     # title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=3.2)
>     # title(paste("Marginal pi:", mar), line=1.5)
>     # abline(a=0,b=1,col="red")
>   # }
>   # pvals_analysis <- function(p_vals){
>     # n <- length(p_vals); i <- 1
>     # alpha <- c(.005,.01,.05)
>     # result <- data.frame("alpha" = alpha, "Err_rate" = NA,"SE" = NA,"p_value" = NA)
>     # for(a in alpha){
>       # result$p_value[i] <- prop.test(x = sum(p_vals < a), n, p = a)$'p.val'
>       # result$Err_rate[i] <- round(as.numeric(prop.test(x = sum(p_vals < a), n, p = a)$'est'),4)
>       # result$SE[i] <- round(sqrt(mean(p_vals < a)*(1-mean(p_vals < a)) / n),4)
>       # i <- i + 1
>     # }; result
>   # }
> 
> 
> # pdf("Summaries of pvals_10pct.pdf")
> 
> # for(i in 1:n_M) {
> # print(paste("Proportion of add_var : ", M[i,1]*100, "%", sep = ""))
> # summary(p_valsMCMC[[i]])
> # hist(p_valsMCMC[[i]], main="Using MCMCglmm estimates",freq = F, breaks=100, xlab="p-value")
> # title(bquote(sigma[a]^2 ~ "/ [Var(X"*beta*") +"~ sigma[a]^2~"] ="~.(M[i,1]*100)*"%"),line=.7, cex.main = .9)
> # title(bquote("n ="~.(length(p_valsMCMC[[i]]))),line=-1, cex.main = .7)
> # abline(h=1,col="red")
> # }
> 
> # boxplot(est_varMCMC, xaxt="n", ylab="Additive variance estimates",
> # xlab=bquote(sigma[a]^2 ~ "/ [Var(X"*beta*") +"~ sigma[a]^2~"]   (in %)"), 
> # main = "Variance estimates over 200 Y realizations",
> # col = rep(c("turquoise","red"), each = n_M))
> # axis(1, at=1:n_M, labels=M[,1]*100)
> # abline(h= M[,1]*M[,2], col= rep("black",n_M), lty =2)
> # dev.off()
> 
> # pvals_analysis <- function(p_vals){
> # n <- length(p_vals); i <- 1
> # alpha <- c(.005,.01,.05)
> # result <- data.frame("alpha" = alpha, "Err_rate" = NA,"SE" = NA,"p_value" = NA)
> # for(a in alpha){
> # result$p_value[i] <- prop.test(x = sum(p_vals < a), n, p = a)$'p.val'
> # result$Err_rate[i] <- round(as.numeric(prop.test(x = sum(p_vals < a), n, p = a)$'est'),4)
> # result$SE[i] <- round(sqrt(mean(p_vals < a)*(1-mean(p_vals < a)) / n),4)
> # i <- i + 1
> # }; result
> # }
> # lapply(p_valsMCMC, pvals_analysis)
> 
> 
> proc.time()
      user     system    elapsed 
378653.391    177.374  38295.722 
