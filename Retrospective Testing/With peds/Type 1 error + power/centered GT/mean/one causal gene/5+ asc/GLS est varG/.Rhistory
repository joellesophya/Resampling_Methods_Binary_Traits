mean(1:5)
sd(1:5)*sqrt(4)/sqrt(5)
sd(c(1,2,4,6,5))*sqrt(4)/sqrt(5)
x<-c(5,3,1,8,2)
y<-c(2,1,4,6,5)
mean(x)
mean(y)
sd(x)*sqrt(4/5)
sd(y)*sqrt(4/5)
cor(x,y)
mean((x-3.8)/3.6 * (y-2.48)/1.85)
cor(x,y)*sqrt(4/5)
mean((x-3.8)/2.48 * (y-3.6)/1.85)
.2^5
.8^5
1-.2^5
.4^5
.4^5
.6^5
1-.4^5
1-.6^5
.92^4
98/100
1-.98^x
x<-1:100
1-.98^x
.98^35
.98^34
sqrt(1-.37^2)*2000
sqrt(1-.37^2)*20000
sqrt(1-.37^2)
.93*20000
.929*20000
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/01-24-2017/In C/.RData")
ls()
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
plot_p(pvals[[1]], "VT quant w eigen")
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/01-24-2017/In C/.RData")
Yperm_type
method_name
plot_p(pvals[[1]], "VT quant")
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/01-24-2017/In C/.RData")
plot_p(pvals[[1]], "WS bin w eigen")
mean(c(1,1,4,4,4,4)
)
mean(c(1,1,4,4,4,4))*100
3*sqrt(2/6*4/6)
3*sqrt(2/6*4/6)*sqrt(100)
sd(c(1,1,4,4,4,4))*10
pnorm(302, 300, 14.1, lower.tail = F)
pnorm(c(297,302), 300, 14.1, lower.tail = F)
pnorm(c(297,302), 300, 14.1, lower.tail = T)
0.4157548- 0.5563984
qnorm(.75/2+.5)
1.15
450-400
50/1.15
50/43.5
pnorm(c(450,350), 400, 43.5)
diffpnorm(c(450,350), 400, 43.5)
diff(pnorm(c(450,350), 400, 43.5))
diff(pnorm(c(900,700), 800, sqrt(2)*43.5))
500
sqrt(1/2*1/2*1000)
1/6*1000
sqrt(1/6*5/6*1000)
mean(c(0,0,0,0,1,5))
mean(c(0,0,0,0,1,5))*100
sd(c(0,0,0,0,1,5))*sqrt(5/6*100)
17+54+29
1/4*100
sqrt(1/4*3/4*100)
17-25
8/4.33
1/2*100
1/2*100
sqrt(1/2*1/2*100)
4/5
mean(c(1,2,2,5))
mean(c(1,2,2,5))*100
mean(c(1,2,2,5))*100
sqrt(c(1,2,2,5)*100)
sd(c(1,2,2,5))*sqrt(100)
15+54*2+29*5
18/17.3
sd(c(1,2,2,5))*sqrt(3/4*100)
18/15
mean(c(1,2,2,5))*100
sd(c(1,2,2,5))*sqrt(3/4*100)
17+54*2+29*5
20/15
-1.4*1000
5*sqrt(1000)
pnorm(0,-1400,158.1,lower.tail = F)
pnorm(0,-140,158.1,lower.tail = F)
.4*1000
sqrt(4/10*6/10*1000)
pnorm(425,400,15.5,lower.tail = F)
((297-300)/14.1)
pnorm(-.2)
100-pnorm(-.2)
(100-pnorm(-.2))/2
(100-pnorm(-.2))/2-44
pnorm(c(297,302),300,14.1)
0.4157548 -0.5563984
(100-15.85)/2
2/14.1
(100-11.92)/2
11/92/2
11.92/2
11.92/2+15.85/2
sd(c(1,1,5,6,9,9))*sqrt(5/6)
sd1<-sd(c(1,1,5,6,9,9))*sqrt(5/6)
sd2 <- sd(c(13,15,19,23,25,27))*sqrt(5/6)
sd1
sd
sd2
s1<-3.29
s2<-5.12
m2 <- sd(c(13,15,19,23,25,27))
11.92/2+15.85/2
m1<-mean(c(1,1,5,6,9,9))
m2 <- mean(c(13,15,19,23,25,27))
m1*100
pnorm(550, m1*100, s1*sqrt(100), lower.tail = F)
pnorm(550, m2*25, s2*sqrt(25), lower.tail = F)
pnorm(450, m1*100, s1*sqrt(100), lower.tail = T)
pnorm(450, m2*25, s2*sqrt(25), lower.tail = T)
1-0.1554892-0.02136485
1-0.05180442-0.01134406
diff(pnorm(c(450, 500), m1*100, s1*sqrt(100), lower.tail = T))
diff(pnorm(c(450,500), m2*25, s2*sqrt(25), lower.tail = T))
1-0.1554892-0.02136485
(pnorm(c(450,500), m2*25, s2*sqrt(25), lower.tail = T))
diff(pnorm(c(450, 550), m1*100, s1*sqrt(100), lower.tail = T))
diff(pnorm(c(450,550), m2*25, s2*sqrt(25), lower.tail = T))
m1*100
m2*25
mean(c(1,1,5,7,8,8))
mean(c(0,0,5,7,9,9))
mean(c(0,0,6,6,9,9))
s1<-sd(c(0,0,6,6,9,9))*sqrt(5/6)
s1
m1<-5
mean(c(14,17,21,23,25))
mean(c(14,17,21,23,25))*25
mean(c(13,15,19,26,27))
s2<-sd(c(13,15,19,26,27))*sqrt(5/6)
s2
m1=m2=500
s1=s1*10
s2<-s2*5
s1
s2
1-pnorm(550,m1,s1)
1-pnorm(550,m2,s3)
1-pnorm(550,m2,s2)
pnorm(450,m1,s1)
pnorm(450,m2,s2)
1-pnorm(550,m1,s1)
(.5-pnorm(550,m1,s1))*2
(.5-pnorm(450,m1,s1))*2
(.5-pnorm(450,m2,s2))*2
m1 <- 12*2 + 26 * -1
m1 <- rep(c(2,-1), each = c(12,38-12))
m1 <- rep(c(2,-1), c(12,38-12))
m1
m1 <- mean(rep(c(2,-1), c(12,38-12)))
m1 <- sd(rep(c(2,-1), c(12,38-12)))*sqrt(37/38)
s1 <- sd(rep(c(2,-1), c(12,38-12)))*sqrt(37/38)
m1 <- mean(rep(c(2,-1), c(12,38-12)))
m2 <- mean(rep(c(1,-1), c(18,38-18)))
s2 <- sd(rep(c(1,-1), c(18,38-18)))*sqrt(37/38)
1-pnorm(0, m1,s1)
1-pnorm(0, m2,s2)
m1 <- m1*100
s1<-s1*10
m2<-m2*100
s2<-s2*10
1-pnorm(0, m1,s1)
1-pnorm(0, m2,s2)
1-pnorm(10, m1,s1)
1-pnorm(10, m2,s2)
pnorm(-10, m1,s1)
pnorm(-10, m2,s2)
pnorm(-15, m2,s2)
pnorm(-15, m1,s1)
1-pnorm(15, m1,s1)
1-pnorm(15, m2,s2)
m1
m2
s1
s2
diff(pnorm(c(-10,10),m2,s2))
.8/3
pnorm(.27)
.6*1000
1/2*10
pnorm(55,50,5)-.5
.341*2
1e4
.5*sqrt(1e4)
1e4*.55
pnorm(5500, 5000, 50)-.5
pnorm(5500, 5000, 50)
se<-sqrt(.5*.5)
se*10
se*100
pnorm(55,50,5)
pnorm(5520, 5000, 50)-.5
pnorm(5200, 5000, 50)-.5
pnorm(5100, 5000, 50)-.5
pnorm(51,50,5)-.5
(pnorm(51,50,5)-.5)*2
(pnorm(5100,5000,50)-.5)*2
pnorm(0, -.8*1000, 3*sqrt(1e3))
pnorm(0, -.8*100, 3*sqrt(1e2))
pnorm(0, -.1*100, 3*sqrt(1e2))
pnorm(0, -.1*1000, 3*sqrt(1e3))
1-pnorm(0, -.1*1e3, 3*sqrt(1e3))
se <- sqrt(.6*.4)
1-pnorm(625, .6*1e3, se*sqrt(1e3))
1-pnorm(475, .6*1e3, se*sqrt(1e3))
1-pnorm(550, .6*1e3, se*sqrt(1e3))
1-pnorm(650, .6*1e3, se*sqrt(1e3))
1-pnorm(650, .6*1e3, se*sqrt(1e3))
1-pnorm(600, .6*1e3, se*sqrt(1e3))
1-pnorm(575, .6*1e3, se*sqrt(1e3))
1-pnorm(645, .6*1e3, se*sqrt(1e3))
1-pnorm(630, .6*1e3, se*sqrt(1e3))
1-pnorm(615, .6*1e3, se*sqrt(1e3))
57/1e4
57/1e4*100
?solve
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/02-20-2017/.RData")
method_name
Yperm_type
q()
20/80
.25*2000
sqrt(2/8*6/8)
sqrt(2/8*6/8)*sqrt(2000)
sd(rep(0:1, c(6,2)))
sd(rep(0:1, c(6,2))) * sqrt(7/8)
sd(rep(0:1, c(60,20))) * sqrt(79/80)
sqrt(2/8*6/8)*sqrt(2000)
sqrt(2/8*6/8)*sqrt(2000)/2000
sqrt(2/8*6/8)*sqrt(2000)/2000*100
1000-242
344+414
.758
sqrt(.758*(1-.758)/1000)
sqrt(.758*(1-.758)/1000) * 100
75.8 + c(-2,2) * 1.35
mean(c(-4,-3,-1,0,6,6))
sd(c(-4,-3,-1,0,6,6))*sqrt(5/6)
mean(c(-4,-3,-1,0,6,6)) * 100
4 * sqrt(100)
4/sqrt(100)
mean(rep(c(0,6), c(4,2)))
sd(rep(c(0,6), c(4,2))) * sqrt(5/6)
x<-sd(rep(c(0,6), c(4,2))) * sqrt(5/6)
x
x * sqrt(100)
x<-sd(rep(c(0,6), c(4,2))) * sqrt(5/6)
x * 10
x
sqrt(4/6*2/6)
sqrt(4/6*2/6)*sqrt(100)
x<-mean(rep(c(0,1), c(4,2))) *100
x
mean(rep(c(0,1), c(4,2)))
pnorm(35, 33.3, 4.71, lower.tail = F)
mean(rep(c(0,1), c(2,4)))
mean(rep(c(0,1), c(2,4)))*100
sd(rep(c(0,1), c(2,4)))*sqrt(5/6)*10
mean(rep(c(0,1), c(5,1)))*100
sd(rep(c(0,1), c(5,1)))*sqrt(5/6) * 10
19-16.66
2.34/3.73
sd(rep(c(0,1), c(4,2)))*sqrt(5/6) * 10/100*100
mean(rep(c(0,1), c(4,2)))
mean(rep(c(0,1), c(4,2)))*100
40-33.3
6.7/4.71
67*2
40*sqrt(2)
pnorm(120, 134, 56.6, lower.tail = F)
6.7*2
0.4*sqrt(2)
28*sqrt(2)
4.71*sqrt(@)
4.71*sqrt(2)
58/500
sqrt(.116*(1-.116)/500)
sqrt(.116*(1-.116)/500)*100
11.6+c(-2,2)*1.43
1/6*100
1/6*100-14
sqrt(1/6*5/6) * sqrt(100)
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/With peds/Type 1 error + power/centered GT/mean/one causal gene/5+ asc/GLS est varG/1.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/With peds/Type 1 error + power/centered GT/mean/one causal gene/5+ asc/GLS est varG/")
load("1.RData")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post. mean mu', 'Mar. mean mu','Post. mean bu', 'Post. mean u','GLS Post. mean mu', 'GLS Mar. mean mu','GLS Post. mean bu', 'GLS Post. mean u','CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
res[[1]][[1]]
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
M
pvals_t1err1 <- pvals_t1err
pvals_pow1 <- pvals_pow
load("2.RData")
effSizes1 <- effSizes
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post. mean mu', 'Mar. mean mu','Post. mean bu', 'Post. mean u','GLS Post. mean mu', 'GLS Mar. mean mu','GLS Post. mean bu', 'GLS Post. mean u','CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err2 <- pvals_t1err; pvals_pow2 <- pvals_pow;effSizes2 <- effSizes
load("3.RData")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post. mean mu', 'Mar. mean mu','Post. mean bu', 'Post. mean u','GLS Post. mean mu', 'GLS Mar. mean mu','GLS Post. mean bu', 'GLS Post. mean u','CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err3 <- pvals_t1err; pvals_pow3 <- pvals_pow;effSizes3 <- effSizes
str(pvals_t1err1)
M
str(pvals_t1err3)
pvals_t1err <- lapply(1:ind, function(a) rbind(pvals_t1err1[[a]],pvals_t1err2[[a]],pvals_t1err3[[a]]))
index
pvals_t1err <- lapply(seq(length(index)), function(a) rbind(pvals_t1err1[[a]],pvals_t1err2[[a]],pvals_t1err3[[a]]))
str(pvals_t1err)
pvals_pow <- lapply(seq(length(index)), function(a) rbind(pvals_pow1[[a]],pvals_pow2[[a]],pvals_pow3[[a]]))
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4)
effSizes <- lapply(seq(length(index)), function(a) c(effSizes1[[a]],effSizes2[[a]],effSizes3[[a]]))
str(effSizes)
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4, effSizes1, effSizes2, effSizes3, effSizes4)
save.image()
ls()
str(effSizes)
object.size(effSizes)
sink(paste("Results.txt"))
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
p <- if(length(pvals)>1) pvals[[i_p]] else pvals[[1]]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\nn =", n," Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
return()
}
## QQ plot of the p-values
plot_p <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
str(pvals_t1err)
library(Hmisc)
## Type 1 error calculations
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
sapply(1:ncol(pvals[[i_p]]), function(i_m){
p <- pvals[[i_p]][,i_m]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\n With", method_used[i_m],", n =", n,", Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
})
return()
}
## QQ plot of the p-values
plot_QQ <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
## Power calculation
plot_power <- function(pvals, level){
power_mat <- t(sapply(1:length(pvals), function(i_p){
apply(pvals[[i_p]], 2, function(x) mean(x<level))
})) # #Tu x #method matrix
colnames(power_mat) <- method_used
rownames(power_mat) <- paste(props, 100-props, sep = "/")
n_p <- sapply(1:length(pvals), function(i_p) nrow(pvals[[i_p]]))
col_vec <- rainbow(n_meth)
pch_vec <- 14 + seq(n_meth)
pdf(paste0("power_level", level*100,"pct.pdf"))
y<-power_mat[,1]; sds <- 2 * sqrt(y * (1-y) / n_p)
errbar(props, y, y+sds, y-sds, type = "b", pch=pch_vec[1], col=col_vec[1], errbar.col = col_vec[1], ylim = c(0,1), cap = .03, ylab = "Power", xlab = "Polygenic effect / Covariates", xaxt = "n")
axis(1, at = props, labels = paste(props, 100-props, sep = "/"))
for(i in 2:n_meth){
y<-power_mat[,i]; sds <- 2 * sqrt(y * (1-y) / n_p)
errbar(props, y, y+sds, y-sds, type = "b",add=T, cap = .03,pch = pch_vec[i], col= col_vec[i], errbar.col = col_vec[i])
}
legend('topright', horiz = F, legend = method_used, pch = pch_vec , col = col_vec, cex=.8, bty="n")
dev.off()
power_mat
}
index
sink("Results.txt")
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
boxplot(effSizes)
