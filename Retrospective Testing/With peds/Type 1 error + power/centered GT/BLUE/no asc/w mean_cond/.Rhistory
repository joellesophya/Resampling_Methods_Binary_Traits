pvals_t1err1 <- pvals_t1err; pvals_pow1 <- pvals_pow; effSizes1 <- effSizes; n_p1 <-n_p
load("2.RData")
n_p <-integer(length(index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]))
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
n_p[k] = n_p[k] + 1; }
}
}
pvals_t1err2 <- pvals_t1err; pvals_pow2 <- pvals_pow; effSizes2 <- effSizes; n_p2 <-n_p
load("3.RData")
n_p <-integer(length(index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]))
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
n_p[k] = n_p[k] + 1; }
}
}
pvals_t1err3 <- pvals_t1err; pvals_pow3 <- pvals_pow; effSizes3 <- effSizes; n_p3 <-n_p
load("4.RData")
n_p <-integer(length(index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]))
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
n_p[k] = n_p[k] + 1; }
}
}
pvals_t1err4 <- pvals_t1err; pvals_pow4 <- pvals_pow; effSizes4 <- effSizes; n_p4 <-n_p
pvals_t1err <- lapply(1:length(pvals_t1err1), function(i) rbind(pvals_t1err1[[i]], pvals_t1err2[[i]],pvals_t1err3[[i]],pvals_t1err4[[i]]))
pvals_pow <- lapply(1:length(pvals_pow1), function(i) rbind(pvals_pow1[[i]], pvals_pow2[[i]],pvals_pow3[[i]],pvals_pow4[[i]]))
effSizes <- lapply(1:length(effSizes1), function(i) rbind(effSizes1[[i]], effSizes2[[i]],effSizes3[[i]],effSizes4[[i]]))
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4, effSizes1, effSizes2, effSizes3, effSizes4)
r(n_p4,n_p3,n_p2,n_p1,n_p)
rm(n_p4,n_p3,n_p2,n_p1,n_p)
ls()
save.image()
rm(list=ls())
load(".RData")
rm(pvals)
rm(res)
rm(n_rep)
save.image()
ls()
sink("Results.txt")
get_type1err(pvals_t1err)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
boxplot(effSizes)
lvl <- .05
plot_power(pvals_pow, lvl)
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/02-20-2017/5+ asc/1.RData")
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/02-20-2017/5+ asc/1.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/02-20-2017/5+ asc/")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err1 <- pvals_t1err; pvals_pow1 <- pvals_pow; effSizes1 <- effSizes
load("2.RData")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err2 <- pvals_t1err; pvals_pow2 <- pvals_pow; effSizes2 <- effSizes
load("3.RData")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err3 <- pvals_t1err; pvals_pow3 <- pvals_pow; effSizes3 <- effSizes
load("4.RData")
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('Post_mean_Yu','Mar_mean_Yu','Post_mean_bu','Post_mean_sep_s_u','Post_mean_su', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err4 <- pvals_t1err; pvals_pow4 <- pvals_pow; effSizes4 <- effSizes
pvals_t1err <- lapply(1:length(pvals_t1err1), function(i) rbind(pvals_t1err1[[i]], pvals_t1err2[[i]],pvals_t1err3[[i]],pvals_t1err4[[i]]))
pvals_pow <- lapply(1:length(pvals_pow1), function(i) rbind(pvals_pow1[[i]], pvals_pow2[[i]],pvals_pow3[[i]],pvals_pow4[[i]]))
effSizes <- lapply(1:length(effSizes1), function(i) rbind(effSizes1[[i]], effSizes2[[i]],effSizes3[[i]],effSizes4[[i]]))
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4, effSizes1, effSizes2, effSizes3, effSizes4)
ls()
save.image()
sink("Results.txt")
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
boxplot(effSizes)
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/Project - assoc mapping w binary traits/With peds/Type 1 error + power/centered GT/BLUE/no asc/w mean_cond/A.RData")
setwd("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/Project - assoc mapping w binary traits/With peds/Type 1 error + power/centered GT/BLUE/no asc/w mean_cond/")
res[[1]][[1]]
length(res)
length(res[[1]])
load("C:/Users/JOELLE/Google Drive/Reasearch Mary Sara _ SAMSUNG/Permutation based methods/Binary trait/Results/Retrospective Testing/Project - assoc mapping w binary traits/With peds/Type 1 error + power/centered GT/BLUE/no asc/w mean_cond/B.RData")
length(res)
length(res[[1]])
<
M
load("A.RData")
M
get_type1err <- function(pvals){
sapply(1:length(pvals), function(i_p){
sapply(1:ncol(pvals[[i_p]]), function(i_m){
p <- pvals[[i_p]][,i_m]
n <- length(p)
result <- t(sapply(c(.005,.01,.05), function(a){
ptest <- prop.test(x = sum(p < a), n, p = a)
pval <- ptest$'p.val'
SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
Err_rate <- as.numeric(ptest$'est')
round(c(a, Err_rate, SE, pval),4)
}))
colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
cat("\n With", method_used[i_m],", n =", n,", Tu = ", M$Tu[i_p],"\n---------------------------\n")
print(result)
})
})
return()
}
## QQ plot of the p-values
plot_QQ <- function(p_vals, method){
n <- length(p_vals)
uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
a=1:n
high <- qbeta(0.025, a, rev(a))
low <- qbeta(0.975, a, rev(a))
polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3)
title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
title(paste('With', method), line=.5)
abline(a=0,b=1,col="red")
}
## Power calculation
plot_power <- function(pvals, level){
power_mat <- t(sapply(1:length(pvals), function(i_p){
apply(pvals[[i_p]], 2, function(x) mean(x<level))
})) # #Tu x #method matrix
colnames(power_mat) <- method_used
rownames(power_mat) <- paste(props, 100-props, sep = "/")
n_p <- sapply(1:length(pvals), function(i_p) nrow(pvals[[i_p]]))
col_vec <- rainbow(n_meth)
pch_vec <- 14 + seq(n_meth)
pdf(paste0("power_level", level*100,"pct.pdf"))
y<-power_mat[,1]; sds <- 2 * sqrt(y * (1-y) / n_p)
errbar(props, y, y+sds, y-sds, type = "b", pch=pch_vec[1], col=col_vec[1], errbar.col = col_vec[1], ylim = c(0,1), cap = .03, ylab = "Power", xlab = "Polygenic effect / Covariates", xaxt = "n")
axis(1, at = props, labels = paste(props, 100-props, sep = "/"))
for(i in 2:n_meth){
y<-power_mat[,i]; sds <- 2 * sqrt(y * (1-y) / n_p)
errbar(props, y, y+sds, y-sds, type = "b",add=T, cap = .03,pch = pch_vec[i], col= col_vec[i], errbar.col = col_vec[i])
}
legend('topright', horiz = F, legend = method_used, pch = pch_vec , col = col_vec, cex=.8, bty="n")
dev.off()
power_mat
}
getwd()
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
index
pvals_t1err
length(index)
pvals_pow
vector("list",1)
index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]
index
sapply(res,length)
sapply(res,length) > 0
ceiling(M[,1]*10+1)
index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
props
n_meth
method_used
power_mat
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
pvals_t1err
pvals_t1err[[1]]
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$T[-1,])
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$Po[1,])
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$T)
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$Po)
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$T)
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$Po)
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
str(pvals_t1err)
sink(paste("Results_at_Tu_", M[,1],".txt")
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
M
colnames(M) <- c("Tu", "Tot")
M
sink(paste("Results_at_Tu_", M[,1],".txt"))
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
M
M$Tu
MM[,1]
M[,1]
M <- data.frame(Tu = M[,1], Tot = M[,2])
M
sink(paste("Results_at_Tu_", M$Tu,".txt"))
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
pvals_t1err1 <- pvals_t1err; pvals_pow1 <- pvals_pow
load("B.RData")
M1<-M
M <- data.frame(Tu = M[,1], Tot = M[,2])
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$T)
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$Po)
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err2 <- pvals_t1err; pvals_pow2 <- pvals_pow; M2<-M
load("C.RData")
M <- data.frame(Tu = M[,1], Tot = M[,2])
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('MCMCglmm', 'GMMAT','CARAT', 'CERAMIC'))
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
#effSizes <- vector("list", length(index))
lvl <- .05
pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))
for(j in 1:n_rep){
for(k in seq(length(index))){
if(is.double(unlist(res[[k]][[j]]))){
pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$T)
pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$Po)
#effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
}
}
}
pvals_t1err3 <- pvals_t1err; pvals_pow3 <- pvals_pow; M3<-M
rm(pvals_t1err)
rm(res)
ls()
str(pvals_t1err1)
str(list(pvals_t1err1, pvals_t1err2, pvals_t1err3)
)
pvals_t1err <- list(pvals_t1err1, pvals_t1err2, pvals_t1err3)
pvals_pow <- list(pvals_pow1, pvals_pow2, pvals_pow3)
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4, effSizes1, effSizes2, effSizes3, effSizes4)
save.image()
M <- rbind(M1,M2,M3)
M
M1
M2
M3
load("A.RData")
M <- data.frame(Tu = M[,1], Tot = M[,2])
M <- rbind(M,M2,M3)
M
index <- ceiling(M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
index
props
power_mat = matrix(NA, length(index), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
power_mat
sink(paste("Results.txt"))
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
str(pvals[[1]])
str(pvals_t1err[[1]])
str(pvals_t1err[[1]][[1]])
pva <- lapply(pvals_t1err, function(x) x[[1]])
str(pva)
str(pvals_t1err)
pvals_t1err <- pva
pvals_pow <- lapply(pvals_pow, function(x) x[[1]])
str(pvals_pow)
sink(paste("Results.txt"))
get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
sapply(1:n_meth, function(i_m){
plot_QQ(p[[i]][,i_m], method_used[i_m])
# hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
# abline(h=1,col="red")
})
title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()
ls()
save.image()
?GMMAT
