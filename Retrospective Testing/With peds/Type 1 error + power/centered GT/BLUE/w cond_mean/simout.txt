
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # 250K MCMC iterations W ASCERT 5+
> library(mvtnorm)
> library(parallel)
> library(reshape)
> 
> library(MCMCglmm)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:reshape’:

    expand

Loading required package: coda
Loading required package: ape
> server <- strsplit(getwd(),"/")[[1]][2]
> lib_folder <- paste0("/",server, "/mbatchou/GMMAT") 
> gmmat_load <- require(GMMAT, lib.loc = lib_folder)
Loading required package: GMMAT
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  no library trees found in 'lib.loc'
> if (!gmmat_load) {
+ lib_folder <- paste0("/",server, "/mbatchou/GMMAT_compute78")
+ gmmat_load <- require(GMMAT, lib.loc = lib_folder)
+ }
Loading required package: GMMAT
> if (!gmmat_load) library(GMMAT)
> source("predict_func_mod.R")
> 
> # Parameters for simulation
> N_fam <- 45
> n_person <- 22
> n_total <- N_fam * n_person
> maf_G2 <- .2
> mean_G1G2 <- (1 - .9^2) * (1-(1 - maf_G2)^2)
> 
> # Make pedigree
> ped1 <- data.frame(fam = NA, ind = 1:n_total, fa = NA, mo = NA)
> fa_ind <- c(NA,NA,NA,1,1,NA,1,NA,1,NA,4,4,4,6,6,6,8,8,10,10,10,10)
> mo_ind <- c(NA,NA,NA,2,2,NA,2,NA,2,NA,3,3,3,5,5,5,7,7,9,9,9,9)
> ped1[,c('mo','fa')] <- cbind(rep(mo_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person),
+                              rep(fa_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person))
> Prec <- inverseA(ped1[,c('ind','mo','fa')])$Ainv
> ped1[is.na(ped1)] <- 0
> ped1$fam <- rep(1:N_fam, each = n_person)
> write.table(ped1,'pedigree',row.names=FALSE, col.names=FALSE,sep='\t')
> 
> # Generate data
> phi <- as.matrix(read.table("add_phi_mat_n22")); colnames(phi) <- 1:n_person
> chol_phi <- chol(phi); C_inv <- solve(chol_phi)
> C_inv_t_1 <- colSums(C_inv)
> H_mat <- diag(n_person) - matrix(rep(tcrossprod(C_inv_t_1, C_inv),n_person), n_person, n_person, byrow = T)/sum(C_inv_t_1^2)
> Phimat <- diag(N_fam) %x% phi
> kin <- melt(diag(N_fam)%x%phi)[,c(2,1,3)]; kin = kin[kin[,1]<=kin[,2],]
> # Get fam for row and col indID
> kin$famrow <- ((kin[,1]-1)%/%n_person) + 1; kin$famcol <- ((kin[,2]-1)%/%n_person) + 1
> kin <- kin[kin$famrow==kin$famcol,]
> phi_inv <- solve(phi) #22x22 matrix
> sex <- rep(c(1,2,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,1),N_fam) #constant
> 
> peddrop <- function (parentmat, MAF) { # parentmat is matrix of parental info
+   nfound <- sum((parentmat[, 1] == 0) & (parentmat[, 2] == 0))
+   npeople <- dim(parentmat)[1]
+   haplos <- matrix(0, npeople, 2)
+   haplos[(parentmat[, 1] == 0) & (parentmat[, 2] == 0),] <- matrix(1:(2 * nfound), nfound, 2, byrow=T)
+   
+   for (i in 1:npeople) {
+     #/* When both parents are in the pedigree drop alleles down the pedigree */
+     if ((parentmat[i, 1] != 0) & (parentmat[i, 2] != 0)) {
+       #/* Randomly choose chrom. 0 or 1 to transmit to kid at each locus
+       trchrom = sample(1:2, 2, replace = T)
+       #// For GT haplotype
+       haplos[i, 1] = haplos[parentmat[i, 1], trchrom[1]];
+       haplos[i, 2] = haplos[parentmat[i, 2], trchrom[2]];
+     } 
+   }
+   
+   state <- as.numeric(runif(2 * nfound) < MAF) #1 if minor, 0 if major allele
+   genos <- matrix(0, npeople, 2)
+   for (i in 1:npeople) genos[i, ] = state[haplos[i,]]
+   
+   return(genos)
+ }
> 
> runme = function (dummy, Tu, Tot)
+ {
+ 	kt<<- kt + 1; write(kt, "iteration_track.txt")
+ 	add_var <- Tu * Tot
+ 	beta <- c(.05, 1, .5)
+ 	old_v_xb <- sum(c(363.6669,.25,1)*beta^2)
+ 	S_XB <- sqrt(Tot * (1 - Tu) / old_v_xb) # Ratio of target variance to var(X)
+ 	beta <- beta * S_XB
+ 	LG <- log(4.8) # increase of 10% in the odds of being a case
+ 	int <- qlogis(0.025) - beta[1] * 31.86 -  beta[2] * 1.5 - LG * mean_G1G2  # Prevalence - b * E(X) - lambda * mean of epistatis indicator
+ 	pvals_t1err = NA; pvals_power = NA
+ 	
+ 	while(any(is.na(pvals_t1err)) | any(is.na(pvals_power))){
+ 		Y <- NULL; age <- NULL; Z <- NULL; G1 <- NULL  
+ 		# G2 <- NULL  
+ 		# Generate family by family
+ 		for (i_fam in 1:N_fam){
+ 			ascert = 0
+ 			while(ascert == 0){
+ 				age_f <- c(73,75,46,43,40,46,40,43,47,51,18,21,15,15,12,9,13,17,24,21,18,14) + runif(n_person, -1.5, 1.5)
+ 				Z_f <- rnorm(n_person)
+ 				U <- c(rmvnorm(1, sigma = add_var * phi)) 
+ 				G1_f <- rowSums(peddrop( ped1[1:n_person, c("fa","mo")], 0.1 )) # Assumes same pedigree structure across families
+ 				G2_f <- rowSums(peddrop( ped1[1:n_person, c("fa","mo")], maf_G2 ))
+ 				
+ 				Y_f <- rbinom(n_person, size = 1, prob = plogis(int + U + LG * ((G1_f > 0) & (G2_f > 0)) +	age_f * beta[1] + sex[ped1$fam == i_fam] * beta[2] + Z_f * beta[3]))
+ 				
+ 				if(sum(Y_f) > 4) ascert <- 1 #At least 5 affected
+ 			}
+ 			Y <- append(Y, Y_f)
+ 			age <- append(age, age_f)
+ 			Z <- append(Z, Z_f)
+ 			G1 <- append(G1, G1_f)
+ 			# G2 <- append(G2, G2_f)
+ 		}
+ 		fam_data = data.frame(Y=Y, age = age, sex = sex, Z = Z, idU = 1:n_total)
+ 
+ ### MCMC glmm
+ 		prior1 <- list(R = list(V = 1, fix=1),
+ 		G = list(G1 = list(V = 1, nu = 1, alpha.mu=0, alpha.V=10^2)))
+ 		mMCMC <- MCMCglmm(Y ~ 1 + age + sex + Z, random =~idU, family = "categorical",
+ 		ginverse = list(idU = Prec), prior=prior1,
+ 		data = fam_data, verbose = F, nitt=250e3, thin=500, burnin=5e3, pr = TRUE)
+ 		effS <- effectiveSize(mMCMC$VCV)[1]
+ 		pi_hat <- as.vector(predict_MCMC(mMCMC, marginal = NULL, posterior = "mean", type = "response")) # E(pi)
+ 
+ ## Generating unassociated Gs
+ 		n_G <- 50 # 50 * n_rep replicates for type 1 error
+ 		Gmat <-  cbind(G1, replicate(n_G, rowSums(peddrop( ped1[,c("fa","mo")], 0.3 )))) # G1 is first column + n * n_G matrix 
+ # Numerator
+ 		res_fam <- matrix(Y - pi_hat, n_person, N_fam)
+ 		T_num_G <- colSums(Gmat * c(crossprod(H_mat, res_fam)))^2
+ 		
+ # Retrospective denominator
+ 		get_denum_retro <- function(G, Matdenum){ 
+ 			mafs <- colMeans(G) / 2
+ 			2 * mafs * (1 - mafs) * Matdenum
+ 		}
+ 		YHPhiY <- sum(c(crossprod(H_mat, res_fam)) * c(crossprod(phi, res_fam)))
+ 		T_denum_G <- get_denum_retro(Gmat, YHPhiY)
+ 		pvalstot <- pchisq(T_num_G / T_denum_G, df = 1, lower.tail = F)
+ 		pvals_t1err <- pvalstot[-1]
+ 		pvals_power <- pvalstot[1]
+ 
+ 		numend <- paste0("_",sample(1e6,1),"_")
+ 		filend <- paste0(numend, '.txt')
+ 
+ # CERAMIC
+ 		system(paste('mkdir', numend))	
+ 		write.table(cbind(ped1[,1:2],fam_data$Y+1,fam_data[,2:4]), paste0('./',numend,'/','phenofile'), sep = '\t', quote=F, col.names=F, row.names=F)
+ 		kin2 = kin; kin2$value[kin2$v == 1] = 0; kin2$value = kin2$v/2
+ 		write.table(kin2[,c(4,1:3)],paste0('./',numend,'/','grmfile'), row.names=F, col.names=F,sep=' ')
+ 		write(Gmat, paste0('./',numend,'/','genofile'), ncolumns = n_total, sep='\t')
+ 		com_ceramic <- paste0('(cd ./',numend,' && exec ../BATMAN -p phenofile -g genofile -k grmfile -c)')
+ 		ret <- system(com_ceramic, ignore.stdout = T, ignore.stderr = T)
+ 		if ((!file.exists(paste0('./',numend,'/BATMANtest.pvalues'))) | (ret !=0)){
+ 			pvals_t1err <- cbind(pvals_t1err, NA) 
+ 			pvals_power <- append(pvals_power, NA) 
+ 			write(paste('Error in CERAMIC', kt), "errorfile.txt", append = T)
+ 		} else{
+ 			pvalstot <- as.numeric(read.table(paste0('./',numend,'/BATMANtest.pvalues'), header=T)[,3])
+ 			pvals_t1err <- cbind(pvals_t1err, pvalstot[-1]) 
+ 			pvals_power <- append(pvals_power, pvalstot[1]) 
+ 		}
+ 		system(paste0('rm -R *', numend, '*'))
+ # Erase files
+ 	}
+ 	pvalstot <- list(Type1Err = pvals_t1err, Power = pvals_power, effectiveSize = effS)
+     return(pvalstot)
+ }
> 
> M = rbind(c(0,5.2),c(0.2,5.5),c(0.4,6),c(0.6,6.1),c(.8,6.3),c(1,6.4))
> n_M = dim(M)[1]
> # Will be a list (over Tu/Te) of a list (over rep) of matrices (GMMAT and MCMC)
> res = rep(list(list()), n_M) 
> n_rep = 1000; kt <- 0 # To keep track of iterations
> 
> for(i in 1:n_M) {
+   res[[i]] = mclapply(1:n_rep, runme, mc.cores = 15, Tu= M[i,1], Tot = M[i,2])
+   save.image() #Save the res object
+ }
> 
> allfile <- list.files()
> file.remove(allfile[grep("BATMAN.",allfile)])
logical(0)
>   
> body <- tail(strsplit(getwd(),"/")[[1]],1); body <- paste("Folder: ", body) 
> system(paste("echo \"",body,"\" | mailx -s \"Sim done\" joelle.mbatchou@gmail.com"), ignore.stdout = T, ignore.stderr = T)
> 

> power_mat
      MCMCglmm CERAMIC
0/100    0.876   0.887
20/80    0.774   0.786
40/60    0.666   0.665
60/40    0.613   0.608
80/20    0.524   0.534
100/0    0.441   0.479

> type1err
      MCMCglmm CERAMIC
0/100   0.0509  0.0503
20/80   0.0518  0.0520
40/60   0.0507  0.0503
60/40   0.0496  0.0491
80/20   0.0505  0.0499
100/0   0.0503  0.0484
##### Effective size
thr <- 40; apply(effS, 2, function(a) mean(a>thr))
analysis_effS <- function(thr){
	cond1 <- apply(effS, 2, function(a) a>thr)
	n_p <- integer(length(index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]))
	props <- seq(0,100,10)[index]
	n_meth <- length( (method_used <- c('MCMCglmm','CERAMIC')) )
	power_mat = matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
	type1err <- matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
	n_pvals <- NULL

	for(k in index){
		assign(paste0('p_vals',k,'_t1err'), vector("list", n_meth)) # List for the methods
		assign(paste0('p_vals',k,'_pow'), vector("list", n_meth)) # List for the methods
	}

	for(i in 1:n_meth){
		for(k in 1:length(index)){
			for(j in (1:n_rep)[cond1[,k]]){
				if(is.double(unlist(res[[k]][[j]]))){
					eval(parse(text=paste0('p_vals',index[k],'_t1err[[',i,']] <- append(p_vals',index[k],'_t1err[[',i,']] , res[[',k,']][[',j,']]$Ty[,',i,'])')))
					eval(parse(text=paste0('p_vals',index[k],'_pow[[',i,']] <- append(p_vals',index[k],'_pow[[',i,']] , res[[',k,']][[',j,']]$Po[',i,'])')))
					if (i ==1) n_p[k] = n_p[k] + 1; }
			}
		}
	}
	level <- .05
# Power
	for(k in 1:length(index)){
		eval(parse(text=paste0('power_mat[',k,',] <- unlist(lapply(p_vals',index[k],'_pow, function(x) mean(x<level)))')))
	}
	Tu_vals <- props/100
	plot_power(na.omit(power_mat), Tu_vals, method_used)

# Type 1 Error
	props <- seq(0,100,by=10)
	for(k in 1:length(index)){
		eval(parse(text=paste0('type1err[',k,',] <- unlist(lapply(p_vals',index[k],'_t1err, pvals_analysis, al = .05))')))
		eval(parse(text=paste0('n_pvals[',k,'] <- length(p_vals',index[k],'_t1err[[1]])')))
	}
	type1err;t(sapply(n_pvals, function(x).05 + c(-1,1)*2*sqrt(.05*(1-.05)/x)))
	png(paste0("t1err_plot_thr",thr,"_%01d.png"), width = 12, height = 9, units = 'in', res=200)
	par(mfrow = c(2,2))
	for(k in 1:length(index)){
		eval(parse(text=paste0('lapply(1:n_meth, draw_pval, p_vals',index[k],'_t1err, method_used)')))
		title(paste('Polygenic effect / Covariates:',props[index[k]],'/',100-props[index[k]]), outer=TRUE, cex=1.1, line = -1.5)
	}
	dev.off()
}

> power_mat #40 thresh. eff. size





> power_mat #40 thresh. eff. size




> power_mat #40 thresh. eff. size




