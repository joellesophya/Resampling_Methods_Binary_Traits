
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Changed:
> # Run 2 chains with different starting values
> # Computed mean/mode from post. of u before & after filtering
> # Used exact normal.logistic correction for presence of iid residual in fitted GLMM
> # 1000 Y realiz.
> # Prev. at .15
> # no asc. & additive G
> library(mvtnorm)
> library(parallel)
> library(reshape)
> 
> library(MCMCglmm)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:reshape’:

    expand

Loading required package: coda
Loading required package: ape
> server <- strsplit(getwd(),"/")[[1]][2]
> lib_folder <- paste0("/",server, "/mbatchou/GMMAT_compute78")
> gmmat_load <- require(GMMAT, lib.loc = lib_folder)
Loading required package: GMMAT
Error in dyn.load(file, DLLpath = DLLpath, ...) : 
  unable to load shared object '/phddata/mbatchou/GMMAT_compute78/GMMAT/libs/GMMAT.so':
  /phddata/mbatchou/GMMAT_compute78/GMMAT/libs/GMMAT.so: ELF file OS ABI invalid
> if (!gmmat_load) library(GMMAT)
> source("predict_func_mod.R")
> 
> # Parameters for simulation
> N_fam <- 45
> n_person <- 22
> n_total <- N_fam * n_person
> maf_G1 <- .2
> # maf_G2 <- .2
> # mean_G1G2 <- (1 - .9^2) * (1-(1 - maf_G2)^2)
> 
> # Make pedigree
> ped1 <- data.frame(fam = NA, ind = 1:n_total, fa = NA, mo = NA)
> fa_ind <- c(NA,NA,NA,1,1,NA,1,NA,1,NA,4,4,4,6,6,6,8,8,10,10,10,10)
> mo_ind <- c(NA,NA,NA,2,2,NA,2,NA,2,NA,3,3,3,5,5,5,7,7,9,9,9,9)
> ped1[,c('mo','fa')] <- cbind(rep(mo_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person),
+                              rep(fa_ind, N_fam)+ n_person*rep(0:(N_fam-1), each = n_person))
> Prec <- inverseA(ped1[,c('ind','mo','fa')])$Ainv
> ped1[is.na(ped1)] <- 0
> ped1$fam <- rep(1:N_fam, each = n_person)
> 
> # Generate data
> phi <- as.matrix(read.table("add_phi_mat_n22")); colnames(phi) <- 1:n_person
> chol_phi <- chol(phi); C_inv <- solve(chol_phi)
> C_inv_t_1 <- colSums(C_inv)
> H_mat <- diag(n_person) - matrix(rep(tcrossprod(C_inv_t_1, C_inv),n_person), n_person, n_person, byrow = T)/sum(C_inv_t_1^2)
> Phimat <- diag(N_fam) %x% phi
> kin <- melt(diag(N_fam)%x%phi)[,c(2,1,3)]; kin = kin[kin[,1]<=kin[,2],]
> # Get fam for row and col indID
> kin$famrow <- ((kin[,1]-1)%/%n_person) + 1; kin$famcol <- ((kin[,2]-1)%/%n_person) + 1
> kin <- kin[kin$famrow==kin$famcol,]
> phi_inv <- solve(phi) #22x22 matrix
> sex <- rep(c(1,2,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,1), N_fam) #constant
> 
> peddrop <- function (parentmat, MAF) { # parentmat is matrix of parental info
+   nfound <- sum((parentmat[, 1] == 0) & (parentmat[, 2] == 0))
+   npeople <- dim(parentmat)[1]
+   haplos <- matrix(0, npeople, 2)
+   haplos[(parentmat[, 1] == 0) & (parentmat[, 2] == 0),] <- matrix(1:(2 * nfound), nfound, 2, byrow=T)
+   
+   for (i in 1:npeople) {
+     #/* When both parents are in the pedigree drop alleles down the pedigree */
+     if ((parentmat[i, 1] != 0) & (parentmat[i, 2] != 0)) {
+       #/* Randomly choose chrom. 0 or 1 to transmit to kid at each locus
+       trchrom = sample(1:2, 2, replace = T)
+       #// For GT haplotype
+       haplos[i, 1] = haplos[parentmat[i, 1], trchrom[1]];
+       haplos[i, 2] = haplos[parentmat[i, 2], trchrom[2]];
+     } 
+   }
+   
+   state <- as.numeric(runif(2 * nfound) < MAF) #1 if minor, 0 if major allele
+   genos <- matrix(0, npeople, 2)
+   for (i in 1:npeople) genos[i, ] = state[haplos[i,]]
+   
+   return(genos)
+ }
> 
> runme = function (dummy, Tu, Tot)
+ {
+   kt<<- kt + 1; write(kt, "iteration_track.txt")
+   add_var <- Tu * Tot
+   beta <- c(.05, 1, .5)
+   old_v_xb <- sum(c(363.6669,.25,1)*beta^2)
+   S_XB <- sqrt(Tot * (1 - Tu) / old_v_xb) # Ratio of target variance to var(X)
+   beta <- beta * S_XB
+   LG <- log(1.5) # increase in the odds of being a case
+   int <- qlogis(0.15) - beta[1] * 31.86 -  beta[2] * 1.5 - LG * 2 * maf_G1  # Prevalence - b * E(X) - lambda * mean of G1
+   pvals_power = NA
+   
+   while(any(is.na(pvals_power))){
+     Y <- NULL; age <- NULL; Z <- NULL; G1 <- NULL  
+     # G2 <- NULL  
+     # Generate family by family
+     for (i_fam in 1:N_fam){
+       ascert = 0
+       while(ascert == 0){
+         age_f <- c(73,75,46,43,40,46,40,43,47,51,18,21,15,15,12,9,13,17,24,21,18,14) + runif(n_person, -1.5, 1.5)
+         Z_f <- rnorm(n_person)
+         U <- c(rmvnorm(1, sigma = add_var * phi)) 
+         G1_f <- rowSums(peddrop( ped1[1:n_person, c("fa","mo")], maf_G1 )) # Assumes same pedigree structure across families
+         
+         Y_f <- rbinom(n_person, size = 1, prob = plogis(int + U + LG * G1_f + age_f * beta[1] + sex[ped1$fam == i_fam] * beta[2] + Z_f * beta[3]))
+         
+         if(sum(Y_f) > -1) ascert <- 1 #No asc
+       }
+       Y <- append(Y, Y_f)
+       age <- append(age, age_f)
+       Z <- append(Z, Z_f)
+       G1 <- append(G1, G1_f)
+     }
+     fam_data = data.frame(Y=Y, age = age, sex = sex, Z = Z, idU = 1:n_total)
+     
+     ### MCMC glmm
+     prior1 <- list(R = list(V = 1, fix=1),
+                    G = list(G1 = list(V = 1, nu = 1, alpha.mu=0, alpha.V=10^2)))
+ 	Xmat <- model.matrix(~ age + sex + Z, data = fam_data)
+ 	V_b <- apply(Xmat[,-1], 2, var)
+ 	MCMCstart <- list(b = c(rmvnorm(1, sigma = diag(c(10^2,10/V_b)))), sig = runif(1, 0, sqrt(10)))
+ 	start_Li <- Xmat %*% MCMCstart$b + c(t(rmvnorm(N_fam, sigma = MCMCstart$sig^2 * phi)))
+ 	mMCMC <- MCMCglmm(Y ~ 1 + age + sex + Z, random =~idU, family = "categorical",
+                       ginverse = list(idU = Prec), prior=prior1, start = list(Liab = start_Li, R = 1, G = MCMCstart$s^2),
+                       data = fam_data, verbose = F, nitt=250e3, thin=500, burnin=25e3, pr = TRUE)
+ 	# Functions to get test stat
+ 	## Generating unassociated Gs
+     Gmat <-  G1
+     get_denum_retro <- function(G, Matdenum){ 
+       mafs <- mean(G) / 2
+       2 * mafs * (1 - mafs) * Matdenum
+     }
+ 	
+ 	get_stats <- function(res){
+ 		T_num_G <- sum(Gmat * c(crossprod(H_mat, res)))^2
+ 		YHPhiY <- sum(c(crossprod(H_mat, res)) * c(crossprod(phi, res)))
+ 		T_denum_G <- get_denum_retro(Gmat, YHPhiY)
+ 		pchisq(T_num_G / T_denum_G, df = 1, lower.tail = F)
+ 	}
+     
+ 	# Chain 1
+ 	post_u_mean <- sapply(colMeans(mMCMC$Sol[,-(1:mMCMC$Fixed$nfl)]), function(a) qlogis(normal.logistic(a,1)))
+ 	EU_hat_mean <- as.vector(crossprod(Prec, post_u_mean) )
+ 	pvals_power <- get_stats(matrix(EU_hat_mean, n_person, N_fam))
+ 	
+ 	MCMCstart <- list(b = c(rmvnorm(1, sigma = diag(c(10^2,10/V_b)))), sig = runif(1, 0, sqrt(10)))
+ 	start_Li <- Xmat %*% MCMCstart$b + c(t(rmvnorm(N_fam, sigma = MCMCstart$sig^2 * phi)))
+ 	mMCMC2 <- MCMCglmm(Y ~ 1 + age + sex + Z, random =~idU, family = "categorical",
+                       ginverse = list(idU = Prec), prior=prior1, start = list(Liab = start_Li, R = 1, G = MCMCstart$s^2),
+                       data = fam_data, verbose = F, nitt=250e3, thin=500, burnin=25e3, pr = TRUE)
+ 	# Chain 2
+ 	post_u_mean2 <- sapply(colMeans(mMCMC2$Sol[,-(1:mMCMC2$Fixed$nfl)]), function(a) qlogis(normal.logistic(a,1)))
+ 	EU_hat_mean2 <- as.vector(crossprod(Prec, post_u_mean2) )
+ 	pvals_power <- append(pvals_power, get_stats(matrix(EU_hat_mean2, n_person, N_fam)))
+   
+ 	# Combine chains then take average
+ 	post_u_mean <- colMeans(rbind(mMCMC$Sol,mMCMC2$Sol)[,-(1:mMCMC$Fixed$nfl)])
+ 	post_u_mean <- sapply(post_u_mean, function(a) qlogis(normal.logistic(a,1)))
+ 	EU_hat_mean_comb<- as.vector(crossprod(Prec, post_u_mean))
+ 	pvals_power <- append(pvals_power, get_stats(matrix(EU_hat_mean_comb, n_person, N_fam)))
+ 	
+ 	# Take average then combine chains
+ 	post_u_mean2 <- (colMeans(mMCMC$Sol[,-(1:mMCMC$Fixed$nfl)])+colMeans(mMCMC2$Sol[,-(1:mMCMC2$Fixed$nfl)]))/2
+ 	post_u_mean2 <- sapply(post_u_mean2, function(a) qlogis(normal.logistic(a,1)))
+ 	EU_hat_mean_comb2<- as.vector(crossprod(Prec, post_u_mean2))
+ 	pvals_power <- append(pvals_power, get_stats(matrix(EU_hat_mean_comb2, n_person, N_fam)))
+ 
+ 	effS <- effectiveSize(mMCMC$VCV)[1]
+ 	effS2 <- effectiveSize(mMCMC2$VCV)[1]
+     
+     numend <- sample(1e6,1)
+     filend <- paste0(numend, '.txt')
+     
+     # CERAMIC
+ 	system(paste('mkdir', numend))	
+ 	write.table(cbind(ped1[,1:2],fam_data$Y+1,fam_data[,2:4]), paste0('./',numend,'/','phenofile'), sep = '\t', quote=F, col.names=F, row.names=F)
+ 	kin2 = kin; kin2$value[kin2$v == 1] = 0; kin2$value = kin2$v/2
+ 	write.table(kin2[,c(4,1:3)],paste0('./',numend,'/','grmfile'), row.names=F, col.names=F,sep=' ')
+ 	write(Gmat, paste0('./',numend,'/','genofile'), ncolumns = n_total, sep='\t')
+ 	com_ceramic <- paste0('(cd ./',numend,' && exec ../BATMAN -p phenofile -g genofile -k grmfile -c)')
+ 	ret <- system(com_ceramic, ignore.stdout = T, ignore.stderr = T)
+ 	if ((!file.exists(paste0('./',numend,'/BATMANtest.pvalues'))) | (ret !=0)){
+ 		# pvals_t1err <- cbind(pvals_t1err, NA) 
+ 		pvals_power <- append(pvals_power, NA) 
+ 		write(paste('Error in CERAMIC', kt), "errorfile.txt", append = T)
+ 	} else{
+ 		pvalstot <- as.numeric(read.table(paste0('./',numend,'/BATMANtest.pvalues'), header=T)[,3])
+ 		pvals_power <- append(pvals_power, pvalstot[1]) 
+ 	}
+ 	system(paste('rm -R', numend))
+ 	
+     # Erase files
+     allfile <- list.files()
+     file.remove(allfile[grep(numend,allfile)])
+   }
+   pvalstot <- list(Power = pvals_power, effSizes = c(effS, effS2)) #4 pvals
+   return(pvalstot)
+ }
> 
> M = rbind(c(0.4,6))
> n_M = dim(M)[1]
> # Will be a list (over Tu/Te) of a list (over rep) of matrices (GMMAT and MCMC)
> res = rep(list(list()), n_M) 
> n_rep = 1000; kt <- 0 # To keep track of iterations
> 
> for(i in 1:n_M) {
+   res[[i]] = mclapply(1:n_rep, runme, mc.cores = 11, Tu= M[i,1], Tot = M[i,2])
+   save.image() #Save the res object
+ }
> 
> allfile <- list.files()
> file.remove(allfile[grep("BATMAN.",allfile)])
logical(0)
> 
> body <- tail(strsplit(getwd(),"/")[[1]],1); body <- paste("Folder: ", body) 
> system(paste("echo \"",body,"\" | mailx -s \"Sim done\" joelle.mbatchou@gmail.com"), ignore.stdout = T, ignore.stderr = T)
> 
> 
> 
> ### Analysis
> # n_p <-integer(length(index <- ceiling(M[,1]*10+1)[sapply(res,length) > 0]))
> # props <- seq(0,100,10)[index]
> # n_meth <- length( (method_used = c('MCMCglmm_mean','MCMCglmm_mode','MCMCglmm_mean_1M_iter','MCMCglmm_mode_1M_iter', 'CERAMIC')) )
> # power_mat = matrix(NA, length(n_p), n_meth, dimnames = list(paste(props, 100-props, sep = "/"), method_used))
> # effSizes <- matrix(NA, n_rep, 2)
> # n_pvals <- NULL
> 
> 
> # for(k in index){
> # assign(paste0('p_vals',k,'_pow'), vector("list", n_meth)) # List for the methods
> # }
> 
> # for(i in 1:n_meth){
> 	# for(j in 1:n_rep){
> 	# for(k in 1:length(index)){
> 		# if(is.double(unlist(res[[k]][[j]]))){
> 			# # eval(parse(text=paste0('p_vals',index[k],'_t1err[[',i,']] <- append(p_vals',index[k],'_t1err[[',i,']] , res[[',k,']][[',j,']]$Ty[,',i,'])')))
> 			# if(any(is.na(res[[k]][[j]]$Po))){
> 				# res[[k]][[j]]$Po[3:4] <- res[[k]][[j]]$Po[1:2]
> 			# }
> 			# eval(parse(text=paste0('p_vals',index[k],'_pow[[',i,']] <- append(p_vals',index[k],'_pow[[',i,']] , res[[',k,']][[',j,']]$Po[',i,'])')))
> 			# effSizes[j,] <- res[[k]][[j]]$effSizes
> 			# if (i ==1) n_p[k] = n_p[k] + 1; }
> 			# }
> 		# }
> # }
> 
> # library(Hmisc)
> # # Tu_vals <- props/100
> # # plot_power(na.omit(power_mat_highS), Tu_vals, method_used, thr)
> 
> # ## Other plot -- Power vs eff. size thresh.
> # plot_power_effsiz <- function(meth_list, thr){
> 	# n_p <- sapply(thr, function(a) sum(effSizes[,2] > a))
> 	# power_effsiz <- t(sapply(1:length(thr), function(ind_c){
> 		# cutoff <- thr[ind_c]
> 		# cond1 <- effSizes[,2] > cutoff; n_p <- append(n_p, sum(cond1))
> 		# level <- .05
> 		# eval(parse(text=paste0('unlist(lapply(p_vals',index[1],'_pow, function(x) mean(x[cond1]<level)))')))
> 	# }))
> 
> 	# sds <- 2 * sqrt(.25 / n_p)
> 	# n_method <- length(meth_list)
> 	# col_vec <- rainbow(n_method)
> 	# pch_vec <- 14 + seq(n_method)
> 
> 	# pdf("power_effSiz_plot.pdf")
> 	# errbar(thr, (y<-power_effsiz[,1]), y+sds, y-sds, type = "b", pch=pch_vec[1], col=col_vec[1], errbar.col = col_vec[1], ylim = c(0,1), cap = .03, ylab = "Power", xlab = "Effective size cutoff")
> 	# for(i in 2:n_method){
> 		# errbar(thr, (y<-power_effsiz[,i]), y+sds, y-sds, type = "b",add=T, cap = .03,pch = pch_vec[i], col= col_vec[i], errbar.col = col_vec[i])
> 	# }
> 	# legend('topright', horiz = F, legend = meth_list, pch = pch_vec , col = col_vec, cex=1.4, bty="n")
> 	# dev.off()
> 	# # power_effsiz
> # }
> 
> # thrs <- seq(0,200, by=30)
> # plot_power_effsiz(method_used, thrs)
> 
> proc.time()
      user     system    elapsed 
846833.604    386.677  87576.188 
