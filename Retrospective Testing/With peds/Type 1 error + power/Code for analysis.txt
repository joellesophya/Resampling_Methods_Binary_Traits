### Functions
library(Hmisc)
## Type 1 error calculations
get_type1err <- function(pvals){
	lapply(1:length(pvals), function(i_p){
		sapply(1:ncol(pvals[[i_p]]), function(i_m){
			p <- pvals[[i_p]][,i_m]
			n <- length(p)
			result <- t(sapply(c(.005,.01,.05), function(a){
				ptest <- prop.test(x = sum(p < a), n, p = a)
				pval <- ptest$'p.val'
				SE <- sqrt(mean(p<a)*(1-mean(p<a))/n)
				Err_rate <- as.numeric(ptest$'est')
				round(c(a, Err_rate, SE, pval),4)
			}))
			colnames(result) <- c("alpha", "Err_rate", "SE", "p_value")
			cat("\n With", method_used[i_m],", n =", n,", Tu = ", M$Tu[i_p],"\n---------------------------\n")
			print(result)
		})
	})
}

## QQ plot of the p-values
plot_QQ <- function(p_vals, method){
	n <- length(p_vals)
	uni2 <- rank(p_vals, ties.method='max'); names(uni2)=c()
	plot(-log10(uni2/(n+1)),-log10(p_vals), type="n", ylab=expression('Observed (-log'[10]*' p-value)'), xlab=expression('Expected (-log'[10]*' p-value)'))
	a=1:n
	high <- qbeta(0.025, a, rev(a))
	low <- qbeta(0.975, a, rev(a))
	polygon(-log10(c(a/n,rev(a/n))), -log10(c(high, rev(low))), col ='gray', border = NA)
	points(-log10(uni2/(n+1)),-log10(p_vals), pch=16,cex=.3) 
	title(expression(bold('Plot of observed vs. expected -log'[10]*' p-values')),line=2)
	title(paste('With', method), line=.5)
	abline(a=0,b=1,col="red")
}

## Power calculation
plot_power <- function(pvals, level){
	power_mat <- t(sapply(1:length(pvals), function(i_p){
		apply(pvals[[i_p]], 2, function(x) mean(x<level))
	})) # #Tu x #method matrix
	colnames(power_mat) <- method_used
	rownames(power_mat) <- paste(props, 100-props, sep = "/")
	n_p <- sapply(1:length(pvals), function(i_p) nrow(pvals[[i_p]]))
	
	col_vec <- rainbow(n_meth)
	pch_vec <- 14 + seq(n_meth)

	pdf(paste0("power_level", level*100,"pct.pdf"))
	y<-power_mat[,1]; sds <- 2 * sqrt(y * (1-y) / n_p)
	errbar(props, y, y+sds, y-sds, type = "b", pch=pch_vec[1], col=col_vec[1], errbar.col = col_vec[1], cex = 1.35, ylim = c(0,1), cap = .03, ylab = "Power", xlab = "Polygenic effect / Covariates", xaxt = "n")
	axis(1, at = props, labels = paste(props, 100-props, sep = "/"))
	for(i in 2:n_meth){
		y<-power_mat[,i]; sds <- 2 * sqrt(y * (1-y) / n_p)
		errbar(props, y, y+sds, y-sds, type = "b",add=T, cap = .03,pch = pch_vec[i], cex = 1.35, col= col_vec[i], errbar.col = col_vec[i])
	}
	legend('topright', horiz = F, legend = method_used_exp, pch = pch_vec , col = col_vec, pt.cex = 1.7, cex=.8, bty="n")
	dev.off()
	power_mat
}

#####################
################
# M <- data.frame(Tu = M[,1], Tot = M[,2])
index <- (M$Tu*10+1)[sapply(res,length) > 0]
props <- seq(0,100,10)[index]
n_meth <- length( method_used <- c('GLS Post. mean mu', "RETRO-MCMC", 'GMMAT','CERAMIC')) 
method_used_exp <- c('GLS Post. mean mu', expression("RETRO"["MCMC"]), 'GMMAT','CERAMIC')
effSizes <- vector("list", length(index))
lvl <- .05

pvals_t1err <- vector("list", length(index)) # For each sim setting
pvals_pow <- vector("list", length(index))

for(j in 1:n_rep){
    for(k in seq(length(index))){
        if(is.double(unlist(res[[k]][[j]]))){
            pvals_t1err[[k]] <- rbind(pvals_t1err[[k]], res[[k]][[j]]$pva[-1,])
            pvals_pow[[k]] <- rbind(pvals_pow[[k]], res[[k]][[j]]$pva[1,])
            effSizes[[k]] <- append(effSizes[[k]], res[[k]][[j]]$eff)
        }
    }
}

# Get each pvals
pvals_pow3 <- pvals_pow; pvals_t1err3 <- pvals_t1err; effSizes3 <- effSizes

## Combine w diff Tu
pvals_t1err <- list(pvals_t1err1, pvals_t1err2, pvals_t1err3); pvals_t1err <- lapply(pvals_t1err, function(x) x[[1]])
pvals_pow <- list(pvals_pow1, pvals_pow2, pvals_pow3); pvals_pow <- lapply(pvals_pow, function(x) x[[1]])
M <- rbind(M,M2,M3)
rm(pvals_pow1, pvals_pow2,pvals_pow3, pvals_pow4, pvals_t1err1, pvals_t1err2, pvals_t1err3, pvals_t1err4, effSizes1, effSizes2, effSizes3, effSizes4)

## Comb w same Tu
pvals_t1err <- lapply(seq(length(index)), function(a) rbind(pvals_t1err1[[a]], pvals_t1err2[[a]],pvals_t1err3[[a]], pvals_t1err4[[a]]))
pvals_pow <- lapply(seq(length(index)), function(a) rbind(pvals_pow1[[a]],pvals_pow2[[a]],pvals_pow3[[a]],pvals_pow4[[a]]))
effSizes <- lapply(seq(length(index)), function(a) c(effSizes1[[a]],effSizes2[[a]],effSizes3[[a]],effSizes4[[a]]))

### Results
## Change ylim, choose mar_pi or post_bu, remove err bars
sink(paste("Results.txt"))
z<- get_type1err(pvals_t1err)
plot_power(pvals_pow, lvl)
sink()
png("QQplot_%01d.png", width = 480 * 1.5, height = 480 * 1.5)
par(mfrow=c(2,n_meth/2))
x <- lapply(1:length(index), function(i, p, Tu){
    sapply(1:n_meth, function(i_m){
        plot_QQ(p[[i]][,i_m], method_used[i_m])
        # hist(p[[i]][,i_m], main="Histogram of permutation-based p-values",freq = F,breaks=100)
        # abline(h=1,col="red")
    })
    title(paste0('Polygenic effect / Covariates: ', Tu[i] * 100,'/',100-(Tu[i] * 100)), outer=TRUE, cex=1.1, line = -1.5)
}, pvals_t1err, M$Tu)
dev.off()

## Type 1 error and p-value at level 0.05
lapply(z, function(a) a[c(6,12),])