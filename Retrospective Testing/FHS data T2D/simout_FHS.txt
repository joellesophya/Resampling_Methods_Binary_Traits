
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # install.packages("data.table", repos = "https://Rdatatable.github.io/data.table", type = "source")
> pckg_list <- c("MCMCglmm", "parallel", "data.table", "Matrix") 
> # "matrixStats",, ,"reshape")
> dummy <- lapply(pckg_list, require, character.only = TRUE)
Loading required package: MCMCglmm
Loading required package: Matrix
Loading required package: coda
Loading required package: ape
Loading required package: parallel
Loading required package: data.table
> load("MCMC_null_res.RData")
> ctphi <- t(chol(as.matrix(phi)))
> setnames(kin <- data.table(melt(as.matrix(phi))), 1:3, c("person2","person1","kincoef"))
> kin <- kin[person1<=person2 & (pheno$unipedno[person1] == pheno$unipedno[person2])]
> kin[, fam := pheno$unipedno[person1]]
> # For CERAMIC -- same for all realizations
> kin[kincoef == 1, kincoef:= 0]; kin[, kincoef := kincoef/2]
> write.table(kin[,.(fam, person1, person2, kincoef)],'grmfile', row.names=F, col.names=F,sep=' ')
> 
> system("mkdir pvalsout")
mkdir: cannot create directory ‘pvalsout’: File exists
> 
> ##### Get genotypes
> shareid_retained = pheno$shareid
> shareid_geno = fread("genodata/ShareID_allchr.txt")$V1
> ind_retained = match(shareid_retained,shareid_geno)
> gene_info <- cbind(fread("SNPs_name_mapping.txt", col.names = c("SNP_name","SNP_rs","CHR","BP"), colClasses = "character", select = 1:4), fread("xwretainsnps_map.txt",col.names = "keep"))
> # Remove SNPs that don't pass QC criterions for call rate, Mendelian error rate and MAF.
> gene_info <- gene_info[keep== 1]; gene_info[,keep:=NULL]
> # Remove SMPs where pvalue testing assoc w cohort ID <=1e-7
> xwWQLS  <- fread("WQLSpval.txt", col.names=c("SNP","pval"))
> gene_info <- gene_info[gene_info$SNP_name %in% xwWQLS[ pval>1e-7, SNP]]
> rm(xwWQLS)
> # Remove SNPs in X chromosome or with no chromosome information
> gene_info <- gene_info[CHR != "X" & CHR !="---"]
> # Convert column classes
> gene_info[, `:=`(CHR = as.integer(CHR), BP = as.numeric(BP))]
> 
> chr_analysis <- function(i){
+ 	system(paste0("mkdir CERAMIC_chr", i))
+ # Files to use for genotype data, CERAMIC genos and pvals summary
+ 	input_file_name = paste0("./genodata/genodata_chr",i,".txt")
+ 	CERAMIC_filename = paste0("./CERAMIC_chr",i,"/genofile")
+ 	pvals_out = paste0("./pvalsout/genoP_chr",i,".txt")
+ 
+ # Read genotype file
+ 	gendata <- fread(input_file_name, select = ind_retained)
+ 	gendata <- gendata[, paste0("V",ind_retained), with=F] #reorder cols
+ 	name_snps <- fread(paste0("./genodata/SNPID_chr",i,".txt"), header = F, select = 1)$V1
+ # Filter based on QC results
+ 	gendata <- gendata[name_snps %in% gene_info[, SNP_name]]
+ 	name_snps <- name_snps[name_snps %in% gene_info[, SNP_name]]
+ 	gendata[gendata == -4] <- -9 # convert missing values for CERAMIC
+ 	fwrite(gendata, file = CERAMIC_filename, col.names = F, row.names = F, sep='\t') #each line is a SNP
+ 	fwrite(list(name_snps) , file = paste0("./CERAMIC_chr",i,"/snpfile"), col.names = F, row.names = F, sep='\t') #each line is a SNP
+ 
+ # Prepare genofile for retro test
+ 	gendata[gendata == -9] <- NA_real_ # convert missing values
+ 	gendata <- as.data.table(t(gendata))
+ # Get MAF for each marker
+ 	mafs <- gendata[,colMeans(.SD, na.rm=T)/2] 
+ 	gendata <- as(as.matrix(gendata), "sparseMatrix")
+ # Replace missing values by 0
+ 	gendata_non0 <- gendata
+ 	gendata_non0[is.na(gendata)] <- 0
+ 
+ ####### RETRO_MCMC 
+ 	t0 <- proc.time()
+ #phenotypic residual for each marker
+ 	big_pheno <- as(replicate(ncol(gendata), M2),"sparseMatrix")
+ 	big_pheno[is.na(gendata)] <- 0
+ 	big_pheno <- scale(big_pheno, center = T, scale = F)
+ 
+ #numerator
+ 	N2 <- colSums(gendata_non0 * big_pheno)^2
+ #denomirator
+ 	GLS_sig <- diag(crossprod(gendata_non0, P) %*% gendata_non0)/(nrow(P) - 1)
+ 	D2<- GLS_sig * rowSums(crossprod(big_pheno, ctphi)^2)
+ 	pvalsM <- pchisq(N2 / D2, df = 1, lower.tail = F)
+ 	t1 <- proc.time()
+ 	
+ # CERAMIC
+ 	write.table( pheno[,.(unipedno, .I, pheno, sex, BMI_ave)], paste0('./CERAMIC_chr',i,'/','phenofile'), sep = '\t', quote=F, col.names=F, row.names=F)
+ 	com_ceramic <- paste0('(cd ./CERAMIC_chr',i,' && exec ../BATMAN -p phenofile -g genofile -k ../grmfile -n snpfile)')
+ 	ret <- system(com_ceramic, ignore.stdout = T, ignore.stderr = T)
+ 	pvalsC <- fread(paste0('./CERAMIC_chr',i,'/BATMANtest.pvalues'), skip = 1, col.names = c("b","SNP","CERAMIC"))[,-1]
+ 	pvalsC[, RETRO_MCMC := pvalsM]
+ 	fwrite(pvalsC, pvals_out, sep = "\t")
+ 	if(i==22) system(paste0('mv ./CERAMIC_chr',i,'/BATMANtest.phenoestimates ./'))
+ 	system(paste0('rm -R CERAMIC_chr', i))
+ 	return(t1-t0)
+ }
> 
> res = mclapply(1:22, chr_analysis, mc.cores = 7)
Read 0.0% of 32219 rowsRead 0.0% of 41266 rowsRead 38.9% of 25701 rowsRead 0.0% of 40055 rowsRead 29.7% of 33690 rowsRead 31.9% of 31365 rowsRead 31.3% of 31960 rowsRead 31.0% of 32219 rowsRead 24.2% of 41266 rowsRead 77.8% of 25701 rowsRead 25.0% of 40055 rowsRead 59.4% of 33690 rowsRead 63.8% of 31365 rowsRead 25701 rows and 1767 (of 9240) columns from 0.448 GB file in 00:00:05
Read 62.6% of 31960 rowsRead 62.1% of 32219 rowsRead 48.5% of 41266 rowsRead 49.9% of 40055 rowsRead 89.0% of 33690 rowsRead 95.6% of 31365 rowsRead 31365 rows and 1767 (of 9240) columns from 0.547 GB file in 00:00:06
Read 93.9% of 31960 rowsRead 33690 rows and 1767 (of 9240) columns from 0.587 GB file in 00:00:06
Read 93.1% of 32219 rowsRead 31960 rows and 1767 (of 9240) columns from 0.557 GB file in 00:00:06
Read 72.7% of 41266 rowsRead 32219 rows and 1767 (of 9240) columns from 0.561 GB file in 00:00:06
Read 74.9% of 40055 rowsRead 96.9% of 41266 rowsRead 99.9% of 40055 rowsRead 40055 rows and 1767 (of 9240) columns from 0.698 GB file in 00:00:08
Read 41266 rows and 1767 (of 9240) columns from 0.719 GB file in 00:00:08
Written 46.9% of 24396 rows in 2 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 2 secs.      Written 89.2% of 24396 rows in 3 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 0 secs.                                                                                                                                           Written 39.0% of 29393 rows in 2 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 3 secs.      Written 40.8% of 30883 rows in 2 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 2 secs.      Written 70.2% of 29393 rows in 3 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 1 secs.      Written 70.4% of 30883 rows in 3 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 1 secs.                                                                                                                                           Written 100.0% of 30883 rows in 4 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 0 secs.                                                                                                                                           Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Read 38.2% of 26153 rowsRead 76.5% of 26153 rowsRead 26153 rows and 1767 (of 9240) columns from 0.456 GB file in 00:00:05
Read 40.2% of 24849 rowsRead 80.5% of 24849 rowsRead 24849 rows and 1767 (of 9240) columns from 0.433 GB file in 00:00:04
Written 43.0% of 18742 rows in 2 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 2 secs.      Written 86.1% of 18742 rows in 3 secs using 1 thread. anyBufferGrown=no; maxBuffUsed=48%. Finished in 0 secs.                                                                                                                                           Read 70.4% of 28391 rowsRead 28391 rows and 1767 (of 9240) columns from 0.495 GB file in 00:00:05
Read 73.1% of 27362 rowsRead 27362 rows and 1767 (of 9240) columns from 0.477 GB file in 00:00:05
Read 87.8% of 22775 rowsRead 22775 rows and 1767 (of 9240) columns from 0.397 GB file in 00:00:04
> save.image()
> 
> proc.time()
    user   system  elapsed 
8622.121  444.722 1987.795 
